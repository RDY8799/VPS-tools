#!/bin/bash

# Função para verificar se a porta está disponível
check_port() {
    port=$1
    result=$(ss -tln | grep -w ":$port")
    if [ -z "$result" ]; then
        echo "A porta $port está disponível."
        available=true
    else
        echo "A porta $port não está disponível."
        read -p "Deseja trocar de porta? (s/n): " choice
        case "$choice" in
            s|S)
                available=false
            ;;
            n|N)
                available=true
            ;;
            *)
                echo "Opção inválida. Por favor, escolha novamente."
                check_port $port
            ;;
        esac
    fi
}

RDYSTUNNEL() {
    clear
    echo -e $DIVIS
    
    echo -e "${blue}--$yellow>>$f$white menu${blue}/${yellow}MENU DE INSTALAÇÃO${blue}/${mag}SSL/TLS Stunnel4$f          $yellow [${blue}v$yellow] $yellow=$f$white Voltar$f";
    echo -e $DIVIS
    
    echo -e "$green ##### $white IP:$cyano  $ip $f";
    echo -e "$green ##### $white Sistema:$cyano  $(cat /etc/so) $f";
    echo -e "$green ##### $white USUÁRIO:$cyano  $USERPROFILENAME $f";
    echo -e $DIVIS
    
    echo -e "${white}//${yellow}//${green}//${mag}//    ${yellow}INSTALADOR SSL/TLS Stunnel4$f"
    echo -e $DIVIS
    
    service="stunnel4"
    if ps -ef | grep -v grep | grep -q "$service"; then
        echo -e "$green $yellow [${blue}p$yellow] $yellow=$f$white $STOPSERVICE $f";
    else
        echo -e "$green $yellow [${blue}s$yellow] $yellow=$f$white $STARTSERVICE $f";
    fi
    
    if [[ "$STUNNELSTATUS" = 'YES' ]]; then
        echo -e "$STUNNELINFO"
        echo -e $DIVIS
        
        echo -e "$green $yellow [${blue}01$yellow] $yellow=$f$white GERENCIAR PORTAS $f";
        echo -e "$green $yellow [${blue}02$yellow] $yellow=$f$white DESISTALAR SSL/TLS Stunnel4 $f";
        echo -e "$green $yellow [${blue}00$yellow] $yellow=$f$white $EXIT $f";
        echo -e $DIVIS
        
        echo -ne "$yellow  Opção:$f"; read -p ""  option
        
        case $option in
            v )  $mainmenu ;;
            p | P )
                execute_and_update "service stunnel4 stop &>/dev/null"
                RDYSPINNER
                echo -e "${white}//${yellow}//${green}//${mag}//    ${red}(STOP) ${blue}OPERAÇÃO ${green}CONCLUÍDA!$f";
                echo -ne "${white}//${yellow}//${green}//${mag}//    ${green}Pressione uma tecla para retornar...$f"; read -n1 -r -p "";
            RDYSTUNNEL ;;
            s | S )
                execute_and_update "service stunnel4 restart &>/dev/null"
                execute_and_update "/etc/init.d/stunnel4 restart &>/dev/null"
                RDYSPINNER
                echo -e "${white}//${yellow}//${green}//${mag}//    ${red}(START) ${blue}OPERAÇÃO ${green}CONCLUÍDA!$f";
                echo -ne "${white}//${yellow}//${green}//${mag}//    ${green}Pressione uma tecla para retornar...$f"; read -n1 -r -p "";
            RDYSTUNNEL ;;
            1 | 01) RDYMANAGEPORT ;;
            2 | 02)
                echo -e "${white}//${yellow}//${green}//${mag}//    ${green} DESINSTALAR SSL/TLS Stunnel4?$f";
                read -p "[s/n]: " -e -i n REMOVE
                if [[ "$REMOVE" = 's' ]]; then
                    echo -e "${white}//${yellow}//${green}//${mag}//    ${blue}DESINSTALANDO, ${green}AGUARDE...$f";
                    execute_and_update "service stunnel4 stop &>/dev/null"
                    RDYSPINNER
                    if [[ "$OS" = 'debian' ]]; then
                        execute_and_update "apt-get remove --purge stunnel -y &>/dev/null"
                        execute_and_update "apt-get remove --purge stunnel4 -y &>/dev/null"
                    else
                        execute_and_update "yum remove stunnel -y &>/dev/null"
                        execute_and_update "yum remove stunnel4 -y &>/dev/null"
                    fi
                    RDYSPINNER
                    echo -e "${white}//${yellow}//${green}//${mag}//    ${blue}DESINSTALAÇÃO ${green}CONCLUÍDA!$f";
                    echo -ne "${white}//${yellow}//${green}//${mag}//    ${green}Pressione uma tecla para retornar ao menu inicial...$f"; read -n1 -r -p "";
                    $mainmenu
                else
                    echo "";
                    echo -e "${white}//${yellow}//${green}//${mag}//    ${blue}OPERAÇÃO CANCELADA!\n$f";
                    echo -ne "${white}//${yellow}//${green}//${mag}//    ${green}Pressione uma tecla para retornar ao menu inicial...$f"; read -n1 -r -p "";
                    $mainmenu
                fi
            ;;
            00) exit ;;
            *) echo -e "$red Opção inválida!$f" ; echo "" ; sleep 2 ; $mainmenu ;;
        esac
        elif [[ "$STUNNELSTATUS" = 'NO' ]]; then
        echo -e "$STUNNELINFO"
        echo -e $DIVIS
        
        echo -e "${white}//${yellow}//${green}//${mag}//    ${yellow}CONTINUAR COM A CONFIGURAÇÃO SSL/TLS Stunnel4?$f";
        read -p " [s/n]: " -e -i s yesNo
        echo -e $DIVIS
        
        if [[ "$yesNo" = 's' ]]; then
            echo -ne "${white}(${mag}<${green}i${mag}>${white})    ${green}VERIFIQUE SE O IP ESTÁ CORRETO $f";
            read -p ": " -e -i $ip IPQ
            echo -ne "${white}(${mag}<${green}i${mag}>${white})    ${blue}Defina uma porta HTTP para o STUNNEL, a porta 4433 já vem definida por padrão.\nDeixe em branco caso não deseje mais alguma porta agora.\n${green}Defina uma nova porta:$f";
            
            # Loop para obter uma porta válida
            while true; do
                read -p "Digite a porta que deseja verificar: " port
                if [[ $port =~ ^[0-9]+$ ]]; then
                    check_port $port
                    if [ "$available" = true ]; then
                        break
                    fi
                else
                    echo "Por favor, digite um número de porta válido."
                fi
            done
            _PORTSTUNNEL=$port
            
            echo -e $DIVIS
            
            echo "";
            echo -e "${white}//${yellow}//${green}//${mag}//    ${mag}Pressione uma tecla para iniciar...$f"; read -n1 -r -p "";
            echo -e "${white}//${yellow}//${green}//${mag}//    ${blue}INICIANDO INSTALAÇÃO ${green}AGUARDE...$f";
            
            if [[ "$OS" = 'debian' ]]; then
                execute_and_update "apt-get install -f -y &>/dev/null"
                execute_and_update "dpkg --configure -a -y &>/dev/null"
                execute_and_update "apt-get update -y &>/dev/null"
                execute_and_update "apt-get install stunnel -y &>/dev/null"
                execute_and_update "apt-get install stunnel4 -y &>/dev/null"
                execute_and_update "apt-get install openssh-client -y &>/dev/null"
                execute_and_update "apt-get install curl -y &>/dev/null"
                execute_and_update "apt-get install openssh-server -y &>/dev/null"
            else
                execute_and_update "yum install -f -y &>/dev/null"
                execute_and_update "dpkg --configure -a -y &>/dev/null"
                execute_and_update "yum install openssh-server -y &>/dev/null"
                execute_and_update "yum install openssh-client -y &>/dev/null"
                execute_and_update "yum install stunnel4 -y &>/dev/null"
                execute_and_update "yum install stunnel -y &>/dev/null"
            fi
            
            echo -e "${white}//${yellow}//${green}//${mag}//    ${green}GERANDO CERTIFICADO...$f";
            openssl req -x509 -nodes -newkey rsa:2048 -keyout stunnel.key -out stunnel.crt -days 365 -subj "/C=BR/ST=RJ/L=Rio de Janeiro/O=RDY Landia/OU=Rdy Software/CN=localhost"
            
            cat stunnel.crt stunnel.key > stunnel.pem
            mv stunnel.pem /etc/stunnel/
            
            if [[ "$_PORTSTUNNEL" = '' ]]; then
                echo -e "${white}//${yellow}//${green}//${mag}//    ${blue}NOVA PORTA ${red}NÃO ${blue}DEFINIDA.$f";
                _PORTSTUNNEL="4433";
            fi
            
            rm -f /etc/stunnel/stunnel.conf
            touch /etc/stunnel/stunnel.conf
            
            echo "client = no " >> /etc/stunnel/stunnel.conf
            echo "[squid] " >> /etc/stunnel/stunnel.conf
            echo "cert = /etc/stunnel/stunnel.pem " >> /etc/stunnel/stunnel.conf
            echo "accept = $_PORTSTUNNEL " >> /etc/stunnel/stunnel.conf
            echo "connect = 127.0.0.1:22" >> /etc/stunnel/stunnel.conf
            
            echo "ENABLED=1" > /etc/default/stunnel4
            echo "FILES="/etc/stunnel/*.conf"" >> /etc/default/stunnel4
            echo "OPTIONS="" " >> /etc/default/stunnel4
            echo "PPP_RESTART=0" >> /etc/default/stunnel4
            
            execute_and_update "/etc/init.d/sshd start &>/dev/null"
            execute_and_update "/etc/init.d/ssh restart &>/dev/null"
            execute_and_update "service stunnel restart &>/dev/null"
            execute_and_update "service stunnel4 restart &>/dev/null"
            
            echo -e "${white}//${yellow}//${green}//${mag}//    ${blue}CONFIGURAÇÃO CONCLUÍDA COM ${green}SUCESSO!$f";
            echo -e "${white}//${yellow}//${green}//${mag}//    ${green} √ ${white} PORTAS SSL/TLS Stunnel4:${red}  $PORTSTUNNEL $f"
            echo -e "${white}//${yellow}//${green}//${mag}//    ${green} √ ${white} IP/HOST: ${red} $IPQ$f"
            echo ""
            echo -e $DIVIS
            
            echo -ne "${white}//${yellow}//${green}//${mag}//    ${green}Pressione uma tecla para retornar ao menu inicial...$f"; read -n1 -r -p "";
            $mainmenu
            elif [[ "$yesNo" = 'n' ]]; then
            echo -e $DIVIS
            echo -e "${white}//${yellow}//${green}//${mag}//    ${blue}OPERAÇÃO CANCELADA!\n${green}Pressione uma tecla para retornar ao menu inicial...$f"; read -n1 -r -p "";
            echo -e $DIVIS
            $mainmenu
            elif [[ "$yesNo" = 'v' ]]; then
            $mainmenu
        else
            echo -e "${white}//${yellow}//${green}//${mag}//    ${blue}OPÇÃO INVÁLIDA!$f";
            echo -ne "${white}//${yellow}//${green}//${mag}//    ${green}Pressione uma tecla para retornar ao menu inicial...$f"; read -n1 -r -p "";
            $mainmenu
        fi
    else
        echo -e "${white}//${yellow}//${green}//${mag}//    ${red}OPS! HÁ ALGO DE ERRADO!\n${mag}Favor entrar em contato com seu fornecedor! ${mag}(SSL/TLS Stunnel4)$f";
        echo -ne "${white}//${yellow}//${green}//${mag}//    ${green}Pressione uma tecla para retornar ao menu inicial...$f"; read -n1 -r -p "";
        $mainmenu
    fi
}

# Função para executar comandos e atualizar pacotes
execute_and_update() {
    echo -n "Executando: $1 - "
    if eval "$1" &>/dev/null; then
        echo "Executado com sucesso"
    else
        echo "Erro ao executar o comando"
    fi
}

RDYSTUNNEL
