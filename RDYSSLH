#!/bin/bash



# Função para alterar a porta SSH
change_ssh_port() {
    read -p "Digite a nova porta SSH: " new_port
    sed -i "s/--ssh [0-9]\+:/--ssh $new_port:/" /etc/default/sslh
    echo "Porta SSH alterada para $new_port."
    read -p "Pressione Enter para voltar ao menu principal..."
}

# Função para alterar a porta HTTP
change_http_port() {
    read -p "Digite a nova porta HTTP: " new_port
    sed -i "s/--http [0-9]\+:/--http $new_port:/" /etc/default/sslh
    echo "Porta HTTP alterada para $new_port."
    read -p "Pressione Enter para voltar ao menu principal..."
}

# Função para alterar a porta SSL
change_ssl_port() {
    read -p "Digite a nova porta SSL: " new_port
    sed -i "s/--ssl [0-9]\+:/--ssl $new_port:/" /etc/default/sslh
    echo "Porta SSL alterada para $new_port."
    read -p "Pressione Enter para voltar ao menu principal..."
}

# Função para alterar a porta OpenVPN
change_openvpn_port() {
    read -p "Digite a nova porta OpenVPN: " new_port
    sed -i "s/--openvpn [0-9]\+:/--openvpn $new_port:/" /etc/default/sslh
    echo "Porta OpenVPN alterada para $new_port."
    read -p "Pressione Enter para voltar ao menu principal..."
}

# Função para exibir o menu
show_menu() {
    clear
    echo "Menu de alteração de portas do SSLH"
    echo "-----------------------------------"
    echo "1. Alterar porta SSH"
    echo "2. Alterar porta HTTP"
    echo "3. Alterar porta SSL"
    echo "4. Alterar porta OpenVPN"
    echo "5. Sair"
    echo "-----------------------------------"
    echo -n "Escolha uma opção: "
    read choice
    case $choice in
        1) change_ssh_port ;;
        2) change_http_port ;;
        3) change_ssl_port ;;
        4) change_openvpn_port ;;
        5) exit ;;
        *) echo "Opção inválida!";;
    esac
}




# Função para verificar se a porta está disponível
check_port() {
    port=$1
    result=$(ss -tln | grep -w ":$port")
    if [ -z "$result" ]; then
        echo "A porta $port está disponível."
        available=true
    else
        echo "A porta $port não está disponível."
        read -p "Deseja trocar de porta? (s/n): " choice
        case "$choice" in
            s|S)
                available=false
            ;;
            n|N)
                available=true
            ;;
            *)
                echo "Opção inválida. Por favor, escolha novamente."
                check_port $port
            ;;
        esac
    fi
}

RDYSSLH() {
    clear
    echo -e "$DIVIS"
    echo -e "${blue}--${yellow}>>${f}${white} menu${blue}/${yellow}MENU DE INSTALAÇÃO${blue}/${mag}SSLH${f}                      ${yellow}[${blue}v${yellow}] ${yellow}=${f}${white} Voltar${f}"
    echo -e "$DIVIS"
    
    echo -e "${green} ##### ${white}IP:${cyano}  $ip ${f}"
    echo -e "${green} ##### ${white}Sistema:${cyano}  $(cat /etc/so) ${f}"
    echo -e "${green} ##### ${white}USUÁRIO:${cyano}  $USERPROFILENAME ${f}"
    echo -e "$DIVIS"
    
    echo -e "${white}//${yellow}//${green}//${mag}//    ${yellow}INSTALADOR SSLH${f}"
    echo -e "$DIVIS"
    
    if [[ "$SSLHSTATUS" = 'YES' ]]; then
        service="sslh"
        if ps -ef | grep -v grep | grep -q "$service"; then
            echo -ne "${green} ${yellow}[${blue}p${yellow}] ${yellow}=${f}${white} $STOPSERVICE ${f}"; echo -e "$SSLHINFO"
        else
            echo -ne "${green} ${yellow}[${blue}s${yellow}] ${yellow}=${f}${white} $STARTSERVICE ${f}"; echo -e "$SSLHINFO"
        fi
        echo -e "$DIVIS"
        
        echo -e "${green} ${yellow}[${blue}01${yellow}] ${yellow}=${f}${white} GERENCIAR PORTAS ${f}"
        echo -e "${green} ${yellow}[${blue}02${yellow}] ${yellow}=${f}${white} DESINSTALAR SSLH ${f}"
        echo -e "${green} ${yellow}[${blue}00${yellow}] ${yellow}=${f}${white} $EXIT ${f}"
        echo -e "$DIVIS"
        
        echo -ne "${yellow}  Opção:${f}"; read -p "" option
        
        case $option in
            v )  $mainmenu ;;
            p | P )
                execute_and_update "service sslh stop"
            RDYSSLH ;;
            s | S )
                execute_and_update "service sslh restart && /etc/init.d/sslh restart"
            RDYSSLH ;;
            1 | 01) show_menu;;
            2 | 02)
                echo -e "${white}//${yellow}//${green}//${mag}//    ${green} DESINSTALAR SSLH?${f}"
                read -p "[s/n]: " -e -i n REMOVE
                if [[ "$REMOVE" = 's' ]]; then
                    echo -e "${white}//${yellow}//${green}//${mag}//    ${blue}DESINSTALANDO, ${green}AGUARDE...${f}"
                    execute_and_update "service sslh stop"
                    if [[ "$OS" = 'debian' ]]; then
                        execute_and_update "apt-get remove --purge sslh -y"
                    else
                        execute_and_update "yum remove sslh -y"
                    fi
                    echo -e "${white}//${yellow}//${green}//${mag}//    ${blue}DESINSTALAÇÃO ${green}CONCLUÍDA!${f}"
                    echo -ne "${white}//${yellow}//${green}//${mag}//    ${green}Pressione uma tecla para retornar ao menu inicial...${f}"; read -n1 -r -p ""
                    $mainmenu
                else
                    echo ""
                    echo -e "${white}//${yellow}//${green}//${mag}//    ${blue}OPERAÇÃO CANCELADA!\n${f}"
                    echo -ne "${white}//${yellow}//${green}//${mag}//    ${green}Pressione uma tecla para retornar ao menu inicial...${f}"; read -n1 -r -p ""
                    $mainmenu
                fi
            ;;
            00) exit ;;
            *) echo -e "${red} Opção inválida!${f}" ; echo "" ; sleep 2 ; $mainmenu;;
        esac
        elif [[ "$SSLHSTATUS" = 'NO' ]]; then
        echo -e "$SSLHINFO"
        echo -e "$DIVIS"
        
        echo -ne "${white}//${yellow}//${green}//${mag}//    ${yellow}CONTINUAR COM A CONFIGURAÇÃO DO SSLH?${f}"
        read -p " [s/n]: " -e -i s yesNo
        echo -e "$DIVIS"
        
        if [[ "$yesNo" = 's' ]]; then
            echo -ne "${white}(${mag}<${green}i${mag}>${white})    ${green}VERIFIQUE SE O IP ESTÁ CORRETO ${f}"
            read -p ": " -e -i $ip IPQ
            echo -ne "${white}(${mag}<${green}i${mag}>${white})    ${blue}Defina uma porta de tráfego para o SSLH, a porta 443 já vem\ndefinida por padrão. Deixe em branco caso não deseje alterá-la.\n${f}"
            # read -p ": " PORTSSLH
            # Loop para obter uma porta válida
            while true; do
                read -p "Digite a porta que deseja verificar: " port
                if [[ $port =~ ^[0-9]+$ ]]; then
                    check_port $port
                    if [ "$available" = true ]; then
                        break
                    fi
                else
                    echo "Por favor, digite um número de porta válido."
                fi
            done
            _PORTSSLH=$port
            echo -e "$DIVIS"
            
            echo ""
            echo -ne "${white}//${yellow}//${green}//${mag}//    ${mag}Pressione uma tecla para iniciar...${f}"; read -n1 -r -p ""
            echo -e "${white}//${yellow}//${green}//${mag}//    ${blue}INICIANDO INSTALAÇÃO ${green}AGUARDE...${f}"
            
            if [[ "$OS" = 'debian' ]]; then
                execute_and_update "export DEBIAN_FRONTEND=noninteractive && apt-get install -y -q sslh"
                execute_and_update "apt-get update -y"
                execute_and_update "apt-get install sslh -y"
            else
                execute_and_update "yum install -y -q sslh"
                execute_and_update "yum update -y"
                execute_and_update "yum install sslh -y"
            fi
            
            rm /etc/default/sslh
            echo "RUN=yes" > /etc/default/sslh
            echo "DAEMON=/usr/sbin/sslh" >> /etc/default/sslh
            
            if [[ "$_PORTSSLH" = '' ]]; then
                echo -e "${white}//${yellow}//${green}//${mag}//    ${blue}NOVA PORTA ${red}NÃO ${blue}DEFINIDA.${f}"
                elif [[ "$_PORTSSLH" = '443' ]]; then
                echo 'DAEMON_OPTS="--user sslh --listen 0.0.0.0:443 --ssh 127.0.0.1:22 --http 127.0.0.1:80 --ssl 127.0.0.1:4433 --openvpn 127.0.0.1:1194 --pidfile /var/run/sslh/sslh.pid --timeout 5"' >> /etc/default/sslh
                echo -e "${white}//${yellow}//${green}//${mag}//    ${blue}PORTA ${white}443 ${blue}JÁ DEFINIDA.${f}"
                elif [[ "$_PORTSSLH" = '22' ]]; then
                echo -e "${white}//${yellow}//${green}//${mag}//    ${blue}PORTA ${white}22 ${blue}JÁ DEFINIDA PARA SSH.${f}"
                echo 'DAEMON_OPTS="--user sslh --listen 0.0.0.0:443 --ssh 127.0.0.1:22 --http 127.0.0.1:80 --ssl 127.0.0.1:4433 --openvpn 127.0.0.1:1194 --pidfile /var/run/sslh/sslh.pid --timeout 5"' >> /etc/default/sslh
            else
                echo -e "${white}//${yellow}//${green}//${mag}//    ${blue}PORTA ${white}$PORTDROP ${blue}DEFINIDA.${f}"
                echo 'DAEMON_OPTS='"--user sslh --listen 0.0.0.0:$_PORTSSLH --ssh 127.0.0.1:22 --http 127.0.0.1:80 --ssl 127.0.0.1:4433 --openvpn 127.0.0.1:1194 --pidfile /var/run/sslh/sslh.pid --timeout 5"'' >> /etc/default/sslh
            fi
            
            if [ -e "/etc/default/sslh" ]; then
                execute_and_update "service sslh restart && /etc/init.d/sslh restart"
            else
                echo -e "${red}OPS! HÁ ALGO DE ERRADO!\n${mag}Favor entrar em contato com seu fornecedor! ${mag}(SSLH CONFIG RUNNING)${f}"
                echo -ne "${white}//${yellow}//${green}//${mag}//    ${green}Pressione uma tecla para retornar ao menu inicial...${f}"; read -n1 -r -p ""
                $mainmenu
            fi
            
            echo -e "${white}//${yellow}//${green}//${mag}//    ${blue}CONFIGURAÇÃO CONCLUÍDA COM ${green}SUCESSO!${f}"
            echo -e "${white}//${yellow}//${green}//${mag}//    ${green} √ ${white} PORTAS SSLH:${red}  $_PORTSSLH ${f}"
            echo -e "${white}//${yellow}//${green}//${mag}//    ${green} √ ${white} IP/HOST: ${red} $IPQ${f}"
            echo -e "${white}//${yellow}//${green}//${mag}//    ${green} √ MANIPULE AS PORTAS EM ${yellow}GERENCIAR PORTAS${f}"
            echo ""
            echo -e "$DIVIS"
            
            echo -ne "${white}//${yellow}//${green}//${mag}//    ${green}Pressione uma tecla para retornar ao menu inicial...${f}"; read -n1 -r -p ""
            $mainmenu
            elif [[ "$yesNo" = 'n' ]]; then
            echo -e "$DIVIS"
            echo -e "${white}//${yellow}//${green}//${mag}//    ${blue}OPERAÇÃO CANCELADA!\n${green}Pressione uma tecla para retornar ao menu inicial...${f}"; read -n1 -r -p ""
            echo -e "$DIVIS"
            $mainmenu
            elif [[ "$yesNo" = 'v' ]]; then
            $mainmenu
        else
            echo -e "${white}//${yellow}//${green}//${mag}//    ${blue}OPÇÃO INVÁLIDA!${f}"
            echo -ne "${white}//${yellow}//${green}//${mag}//    ${green}Pressione uma tecla para retornar ao menu inicial...${f}"; read -n1 -r -p ""
            $mainmenu
        fi
    else
        echo -e "${white}//${yellow}//${green}//${mag}//    ${red}OPS! HÁ ALGO DE ERRADO!\n${mag}Favor entrar em contato com seu fornecedor! ${mag}(SSLH)${f}"
        echo -ne "${white}//${yellow}//${green}//${mag}//    ${green}Pressione uma tecla para retornar ao menu inicial...${f}"; read -n1 -r -p ""
        $mainmenu
    fi
}

# Função para executar um comando e atualizar a mesma linha com os logs
execute_and_update() {
    command="$@"
    $command > /tmp/output.log 2>&1 &   # Redireciona a saída e executa em segundo plano
    pid=$!                               # Pega o PID do processo em segundo plano
    
    while kill -0 $pid > /dev/null 2>&1; do
        echo -ne "Executando: $command - Logs: $(tail -n 1 /tmp/output.log)\033[0K\r"
        sleep 0.5
    done
    
    echo -ne "Executando: $command - Logs: $(tail -n 1 /tmp/output.log)\033[0K\r"
    echo ""
}

RDYSSLH
