#!/bin/bash

###### COPYRIGHT RDY SOFTWARE 2024
# 13/02/2024
# Definindo o PATH
PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin
export PATH

# Verifique o diretório do script
script_dir="/usr/local/bin"

# Carregando as strings
if [ -f "$script_dir/STRINGS" ]; then
    source "$script_dir/STRINGS"
else
    echo "Erro: Arquivo de strings não encontrado em $script_dir/STRINGS"
    exit 1
fi

# Verificando permissões de root
if [ "$(id -u)" -eq 0 ]; then
    :
    elif sudo -n true 2>/dev/null; then
    clear
    echo -e "$white Você não está como usuário root, mas está no grupo sudo"
    echo -e "$white Para tornar-se um usuário root, execute $red sudo su$f ou execute $red sudo $0$f"
    exit
else
    clear
    echo -e "Você não está como usuário root e não tem permissões de sudo\nPara tornar-se um usuário root, execute $red su $f e digite sua senha root"
    exit
fi


# Criar pastas para novos logins
folders=(/etc/rdy/usuarios /etc/rdy/limit /etc/rdy/time /etc/rdy /etc/rdy/mpass /etc/rdy/backups /etc/rdy/mdate)
for folder in "${folders[@]}"; do
    if [ ! -d "$folder" ]; then
        mkdir -p "$folder" || { echo "Erro ao criar diretório $folder"; exit 1; }
    fi
done

# Obter informações do sistema
about="© ${blue}Copyright ${yellow}RDY ${red}SOFTWARE ${yellow}{${red}}$f ${blue}2019$f"
system_info=$(cat /etc/issue | grep '^1' | cut -d' ' -f6,7,8 | sed 's/1//' | sed 's/	//')
ip=$(wget -qO- icanhazip.com)

# ESTADO DE RAM
CPU=$(ps aux  | awk 'BEGIN { sum = 0 }  { sum += sprintf("%f",$3) }; END { printf " " "%.2f" "%%", sum}')
totalram=$(free | grep Mem | awk '{print $2}')
usedram=$(free | grep Mem | awk '{print $3}')
freeram=$(free | grep Mem | awk '{print $4}')
swapram=$( cat /proc/meminfo | grep SwapTotal | awk '{print $2}')

RDY_HEADER="$yellow CPU USADA:$cyano$CPU ${blue}|$f$yellow RAM USADA: $cyano$(($usedram / 1024))MB$yellow LIVRE: $cyano$(($freeram / 1024))MB ${blue}|$f$yellow SWAP: $cyano$(($swapram / 1024))MB $f\n$green ##### $white IP:$cyano  $ip $f\n$green ##### $white $SYSTEM:$cyano  $system_info $f\n$green ##### $white $USER:$cyano  $USERPROFILENAME $f\n$DIVIS\n$green $yellow [${blue}i$yellow] $yellow=$f$white $NOTIFICATION $yellow 5         ${blue}/${red}/${green}/ $cyano$about$f\n$DIVIS";

# Função para exibir uma animação de spinner
RDYSPINNER()
{
    local pid=$!
    local delay=0.50
    local spinstr='|/-\'
    tput civis -- invisible
    while [ "$(ps a | awk '{print $1}' | grep $pid)" ]; do
        local temp=${spinstr#?}
        printf " ${yellow}[${mag}%c${red}]$f  " "$spinstr"
        local spinstr=$temp${spinstr%"$temp"}
        sleep $delay
        printf "\b\b\b\b\b\b"
    done
    printf "    \b\b\b\b"
    tput cnorm -- normal
}

mainmenu=menu;

# Verificar o tipo de sistema operacional
if [[ -e /etc/debian_version ]]; then
    OS=debian
    GROUPNAME=nogroup
    RCLOCAL='/etc/rc.local'
    elif [[ -e /etc/centos-release || -e /etc/redhat-release ]]; then
    OS=centos
    GROUPNAME=nobody
    RCLOCAL='/etc/rc.d/rc.local'
else
    echo "Parece que você não está executando este instalador em um sistema Debian, Ubuntu ou CentOS"
    exit 2
fi

# Verificar se o Squid está instalado
if ! dpkg -s squid &>/dev/null && ! dpkg -s squid3 &>/dev/null; then
    SQUIDINFO="${white}SQUID PROXY ${red}NÃO INSTALADO$f"
    SQUIDSTATUS="NO"
else
    SQUIDINFO="${white}SQUID PROXY ${green}INSTALADO$f"
    SQUIDSTATUS="YES"
    SQUIDSTATUSS="${green}°$f"
fi

# Verificar se o Dropbear está instalado
if ! dpkg -s dropbear &>/dev/null; then
    DROPINFO="${white}DROPBEAR ${red}NÃO INSTALADO$f"
    DROPSTATUS="NO"
else
    DROPINFO="${white}DROPBEAR ${green}INSTALADO$f"
    DROPSTATUS="YES"
    DROPSTATUSS="${green}°$f"
fi

# Verificar se o SSLH está instalado
if ! dpkg -s sslh &>/dev/null; then
    SSLHINFO="${white}SSLH ${red}NÃO INSTALADO$f"
    SSLHSTATUS="NO"
else
    SSLHINFO="${white}SSLH ${green}INSTALADO$f"
    SSLHSTATUS="YES"
    SSLHSTATUSS="${green}°$f"
fi

# Verificar se o Stunnel está instalado
if ! dpkg -s stunnel4 &>/dev/null; then
    STUNNELINFO="${white}SSL/TLS Stunnel4 ${red}NÃO INSTALADO$f"
    STUNNELSTATUS="NO"
else
    STUNNELINFO="${white}SSL/TLS Stunnel4 ${green}INSTALADO$f"
    STUNNELSTATUS="YES"
    STUNNELSTATUSS="${green}°$f"
fi

# Verificar se o BadVPN está instalado
if ! dpkg -s badvpn-udpgw &>/dev/null; then
    BADVPNINFO="${white}BADVPN ${red}NÃO INSTALADO$f"
    BADVPNSTATUS="NO"
else
    BADVPNINFO="${white}BADVPN ${green}INSTALADO$f"
    BADVPNSTATUS="YES"
    BADVPNSTATUSS="${green}°$f"
fi

# Verificar se o MTPROTO está instalado
if [ -f "/etc/rdy/secret" ]; then
    MTPROXYINFO="${white}MTPROTO ${green}INSTALADO$f"
    MTPROXYSTATUS="YES"
    MTPROXYSTATUSS="${green}°$f"
else
    MTPROXYINFO="${white}MTPROTO ${red}NÃO INSTALADO$f"
    MTPROXYSTATUS="NO"
fi



###################################################################################

RDYBADVPN(){
    clear
    echo -e $DIVIS
    echo -e "${blue}--$yellow>>$f$white menu${blue}/${yellow}MENU DE INSTALAÇÃO${blue}/${mag}BADVPN$f                    $yellow [${blue}v$yellow] $yellow=$f$white Voltar$f";
    echo -e $DIVIS
    echo -e "$green ##### $white IP:$cyano  $ip $f";
    echo -e "$green ##### $white $SYSTEM:$cyano  $system_info $f";
    echo -e "$green ##### $white $USER:$cyano  $USERPROFILENAME $f";
    echo -e $DIVIS
    
    echo -e "${white}//${yellow}//${green}//${mag}//    ${yellow}INSTALADOR BADVPN$f"
    echo -e $DIVIS
    if [[ "$BADVPNSTATUS" = 'YES' ]]; then
        service="udpgw";
        if (( $(ps -ef | grep -v grep | grep $service | wc -l) > 0 ))
        then
            echo -ne "$green $yellow [${blue}p$yellow] $yellow=$f$white $STOPSERVICE $f"; echo -e "$BADVPNINFO";
        else
            echo -ne "$green $yellow [${blue}s$yellow] $yellow=$f$white $STARTSERVICE $f"; echo -e "$BADVPNINFO";
        fi
        echo -e $DIVIS
        echo -e "$green $yellow [${blue}01$yellow] $yellow=$f$white DESISTALAR BADVPN $f";
        echo -e "$green $yellow [${blue}00$yellow] $yellow=$f$white $EXIT $f";
        echo -e $DIVIS
        
        echo -ne "$yellow  Opção:$f";read -p ""  option
        
        case $option in
            
            v )  $mainmenu ;;
            p | P ) kill -9 $(ps -ef | grep badvpn | awk '{print $2}') > /dev/null 2> /dev/null & RDYSPINNER
                echo -e "${white}//${yellow}//${green}//${mag}//    ${red}(STOP) ${blue}OPERAÇÃO ${green}CONCLUÍDA!$f";
                echo -ne "${white}//${yellow}//${green}//${mag}//    ${green}Pressione uma tecla para retornar...$f"; read -n1 -r -p "";
            RDYBADVPN ;;
            s | S ) badvpn-udpgw --listen-addr 127.0.0.1:7300 --max-clients 1000 --max-connections-for-client 10 > /dev/null & RDYSPINNER
                echo -e "${white}//${yellow}//${green}//${mag}//    ${red}(START) ${blue}OPERAÇÃO ${green}CONCLUÍDA!$f";
                echo -ne "${white}//${yellow}//${green}//${mag}//    ${green}Pressione uma tecla para retornar...$f"; read -n1 -r -p "";
            RDYBADVPN ;;
            1 | 01) echo -e "${white}//${yellow}//${green}//${mag}//    ${green} DESINSTALAR BADVPN?$f"; read -p "[s/n]: " -e -i n REMOVE
                if [[ "$REMOVE" = 's' ]]; then
                    echo -e "${white}//${yellow}//${green}//${mag}//    ${blue}DESINSTALANDO, ${green}AGUARDE...$f";
                    kill -9 $(ps -ef | grep badvpn | awk '{print $2}') > /dev/null 2> /dev/null & RDYSPINNER
                    if [[ "$OS" = 'debian' ]]; then
                        apt-get remove --purge BADVPN -y 1> /dev/null 2> /dev/null & RDYSPINNER
                    else
                        yum remove BADVPN -y 1> /dev/null 2> /dev/null & RDYSPINNER
                    fi
                    echo -e "${white}//${yellow}//${green}//${mag}//    ${blue}DESINSTALAÇÃO ${green}CONCLUÍDA!$f";
                    echo -ne "${white}//${yellow}//${green}//${mag}//    ${green}Pressione uma tecla para retornar ao menu inicial...$f"; read -n1 -r -p "";
                    $mainmenu
                else
                    echo "";
                    echo -e "${white}//${yellow}//${green}//${mag}//    ${blue}OPERAÇÃO CANCELADA!\n$f";
                    echo -ne "${white}//${yellow}//${green}//${mag}//    ${green}Pressione uma tecla para retornar ao menu inicial...$f"; read -n1 -r -p "";
                    $mainmenu
                fi
            ;;
            00) exit ;;
            *)echo -e "$red Opção inválida!$f" ; echo "" ; sleep 2 ; $mainmenu;;
        esac
        elif [[ "$BADVPNSTATUS" = 'NO' ]]; then
        echo -e "$BADVPNINFO";
        echo -e $DIVIS
        echo -ne "${white}//${yellow}//${green}//${mag}//    ${yellow}CONTINUAR COM A CONFIGURAÇÃO DO BADVPN?$f"; read -p " [s/n]: " -e -i s yesNo
        echo -e $DIVIS
        
        
        if [[ "$yesNo" = 's' ]]; then
            echo -ne "${white}(${mag}<${green}i${mag}>${white})    ${blue}A porta 7300 já vem definida por padrão na configuração  BADVPN.$f";
            echo -e $DIVIS
            
            echo "";
            echo -e "${white}//${yellow}//${green}//${mag}//    ${mag}Pressione uma tecla para iniciar...$f"; read -n1 -r -p "";
            echo -e "${white}//${yellow}//${green}//${mag}//    ${blue}INICIANDO INSTALAÇÃO ${green}AGUARDE...$f";
            if [[ "$OS" = 'debian' ]]; then
                apt-get install -f -y > output.txt #1> /dev/null 2> /dev/null & RDYSPINNER
                dpkg --configure -a -y 1> /dev/null 2> /dev/null & RDYSPINNER
                apt-get update -y 1> /dev/null 2> /dev/null  & RDYSPINNER
                apt-get install -y gcc 1> /dev/null 2> /dev/null & RDYSPINNER
                apt-get install -y make 1> /dev/null 2> /dev/null & RDYSPINNER
                apt-get install -y g++ 1> /dev/null 2> /dev/null & RDYSPINNER
                apt-get install -y openssl 1> /dev/null 2> /dev/null & RDYSPINNER
                apt-get install -y build-essential 1> /dev/null 2> /dev/null & RDYSPINNER
                apt-get install -y cmake 1> /dev/null 2> /dev/null & RDYSPINNER
            else
                yum install -f -y 1> /dev/null 2> /dev/null & RDYSPINNER
                dpkg --configure -a -y 1> /dev/null 2> /dev/null & RDYSPINNER
                yum update -y 1> /dev/null 2> /dev/null  & RDYSPINNER
                yum install -y gcc 1> /dev/null 2> /dev/null & RDYSPINNER
                yum install -y make 1> /dev/null 2> /dev/null & RDYSPINNER
                yum install -y g++ 1> /dev/null 2> /dev/null & RDYSPINNER
                yum install -y openssl 1> /dev/null 2> /dev/null & RDYSPINNER
                yum install -y build-essential 1> /dev/null 2> /dev/null & RDYSPINNER
                yum install -y cmake 1> /dev/null 2> /dev/null & RDYSPINNER
            fi
            
            # if aki
            wget - https://storage.googleapis.com/google-code-archive-downloads/v2/code.google.com/badvpn/badvpn-1.999.128.tar.bz2 -o 1> /dev/null 2> /dev/null & RDYSPINNER
            tar -xf badvpn-1.999.128.tar.bz2 1> /dev/null 2> /dev/null & RDYSPINNER
            mkdir /etc/badvpn-install 1> /dev/null 2> /dev/null & RDYSPINNER
            cd /etc/badvpn-install 1> /dev/null 2> /dev/null & RDYSPINNER
            cmake ~/badvpn-1.999.128 -DBUILD_NOTHING_BY_DEFAULT=1 -DBUILD_UDPGW=1 1> /dev/null 2> /dev/null & RDYSPINNER
            make install 1> /dev/null 2> /dev/null & RDYSPINNER
            rm -rf /etc/badvpn-install 1> /dev/null 2> /dev/null & RDYSPINNER
            cd ; rm -rf badvpn.sh badvpn-1.999.128/ badvpn-1.999.128.tar.bz2 1> /dev/null 2> /dev/null & RDYSPINNER
            echo -e "${green} Executando em screem (Aguarde 5 segundos...)$f";
            sleep 5
            screen -dm badvpn-udpgw --listen-addr 127.0.0.1:7300 --max-clients 1000 --max-connections-for-client 10 #> /dev/null & RDYSPINNER
            #else
            #######
            #echo -e "${red}OPS! HÁ ALGO DE ERRADO!\n${mag}Favor entrar em contato com seu fornecedor! ${mag}(BADVPN CONFIG RUNNING)$f";
            #echo -ne "${white}//${yellow}//${green}//${mag}//    ${green}Pressione uma tecla para retornar ao menu inicial...$f"; read -n1 -r -p "";
            #$mainmenu
            #fi
            echo -e "${white}//${yellow}//${green}//${mag}//    ${blue}CONFIGURAÇÃO CONCLUÍDA COM ${green}SUCESSO!$f";
            echo "";
            echo -e "${white}//${yellow}//${green}//${mag}//    ${green} √ ${white} PORTA BADVPN:${red} 7300 $f"
            echo ""
            echo -e $DIVIS
            echo -ne "${white}//${yellow}//${green}//${mag}//    ${green}Pressione uma tecla para retornar ao menu inicial...$f"; read -n1 -r -p "";
            $mainmenu
            elif [[ "$yesNo" = 'n' ]]; then
            echo -e $DIVIS
            
            echo -e "${white}//${yellow}//${green}//${mag}//    ${blue}OPERAÇÃO CANCELADA!\n${green}Pressione uma tecla para retornar ao menu inicial...$f"; read -n1 -r -p "";
            echo -e $DIVIS
            
            $mainmenu
            elif [[ "$yesNo" = 'v' ]]; then
            $mainmenu
        else
            echo -e "${white}//${yellow}//${green}//${mag}//    ${blue}OPÇÃO INVÁLIDA!$f";
            echo -ne "${white}//${yellow}//${green}//${mag}//    ${green}Pressione uma tecla para retornar ao menu inicial...$f"; read -n1 -r -p "";
            $mainmenu
        fi
    else
        echo -e "${white}//${yellow}//${green}//${mag}//    ${red}OPS! HÁ ALGO DE ERRADO!\n${mag}Favor entrar em contato com seu fornecedor! ${mag}(BADVPN)$f";
        echo -ne "${white}//${yellow}//${green}//${mag}//    ${green}Pressione uma tecla para retornar ao menu inicial...$f"; read -n1 -r -p "";
        $mainmenu
    fi
}

###################################################################################
###################################################################################


#### MTPROTO


###################################################################################

RDYSOCKS(){
    echo ""
}


RDYINSTALL() {
    clear
    echo -e $DIVIS
    echo -e "$green ##### $white IP:$cyano  $ip $f";
    echo -e "$green ##### $white Sistema:$cyano  $system_info $f";
    echo -e "$green ##### $white USUÁRIO:$cyano  $USERPROFILENAME $f";
    echo -e $DIVIS
    
    echo -e "${blue}--$yellow>>$f$white menu${blue}/${yellow}MENU DE INSTALAÇÃO$f                           $yellow [${blue}v$yellow] $yellow=$f$white Voltar$f";
    echo -e $DIVIS
    
    echo -e "$green $yellow [${blue}01$yellow] $yellow=$f$white SSLH $SSLHSTATUSS $f";
    echo -e "$green $yellow [${blue}02$yellow] $yellow=$f$white BADVPN $STUNNELSTATUSS $f";
    echo -e "$green $yellow [${blue}03$yellow] $yellow=$f$white SQUID PROXY $SQUIDSTATUSS $f";
    echo -e "$green $yellow [${blue}04$yellow] $yellow=$f$white DROPBEAR $DROPSTATUSS $f";
    echo -e "$green $yellow [${blue}05$yellow] $yellow=$f$white OPENVPN $OPENSTATUSS $f";
    echo -e "$green $yellow [${blue}06$yellow] $yellow=$f$white SOCKS 5 $SOCKSTATUSS $f";
    echo -e "$green $yellow [${blue}07$yellow] $yellow=$f$white SSL - STUNNEL4 $STUNNELSTATUSS $f";
    echo -e "$green $yellow [${blue}08$yellow] $yellow=$f$white MTPROTO $MTPROXYSTATUSS $f";
    echo -e "$green $yellow [${blue}00$yellow] $yellow=$f$white $EXIT $f";
    echo -e $DIVIS
    
    echo -ne "$yellow  Opção:$f"; read -p "" option
    
    case $option in
        v )  $mainmenu ;;
        n | net)
            netstat -nlpt
            echo -ne "${white}//${yellow}//${green}//${mag}//    ${green}Pressione uma tecla para retornar ao menu inicial...$f"; read -n1 -r -p "";
        $mainmenu ;;
        1 | 01) source RDYSSLH ;;
        2 | 02) RDYBADVPN ;;
        3 | 03) source RDYSQUIDPROXY ;;
        4 | 04) source RDYDROPBEAR ;;
        5 | 05) source RDYSTUNNEL ;;
        6 | 06) RDYSOCKS ;;
        7 | 07) source RDYSTUNNEL ;;
        8 | 08) RDYMTPROTO ;;
        00) exit ;;
        * ) echo -e "$red Opção inválida!$f" ; echo "" ; sleep 2 ; $mainmenu ;;
    esac
}


##########################################################################
RDYNEWUSER() {
    echo -e "${blue}--$yellow>>$f$white menu${blue}/${yellow}GERENCIAMENTO DE USUÁRIOS${blue}/${mag}$NEWUSER$f       $yellow [${blue}v$yellow] $yellow=$f$white Voltar$f";
    echo -e $DIVIS
    echo -ne "${blue}[1/4]${green}Nome do novo usuário:$f";
    read -p "" user
    if [[ "$user" = 'v' ]]; then
        read -p "Quer mesmo voltar? [s/n]: " esco
        if [[ "$esco" = 's' ]]; then
            $mainmenu
        fi
    fi
    if cat /etc/passwd | grep $user: | grep -vi [a-z]$user | grep -v [0-9]$user > /dev/null; then
        echo -e "\033[4;31mUsuário \033[5;31m$user$f já existe, crie outro usúario.$f"
        echo -ne "${white}//${yellow}//${green}//${mag}//    ${green}Pressione uma tecla para retornar ao menu...$f"; read -n1 -r -p "";
        RDYNEWUSER
    else
        echo -ne "${blue}[2/4]${green}Senha para \033[4;35m$user:$f";
        read -p "" password
        if [[ "$password" = 'v' ]]; then
            read -p "Quer mesmo voltar? [s/n]: " esco
            if [[ "$esco" = 's' ]]; then
                $mainmenu
            fi
        fi
        echo -ne "${blue}[3/4]${green}Dias para expirar:$f";
        read -p "" days
        if [[ "$days" = 'v' ]]; then
            read -p "Quer mesmo voltar? [s/n]: " esco
            if [[ "$esco" = 's' ]]; then
                $mainmenu
            fi
        fi
        echo -ne "${blue}[4/4]${green}Quantidade de logins permitido:$f";
        read -p "" logins
        if [[ "$logins" = 'v' ]]; then
            read -p "Quer mesmo voltar? [s/n]: " esco
            if [[ "$esco" = 's' ]]; then
                $mainmenu
            fi
        fi
        
        rdyw=$(date '+%C%y-%m-%d' -d " +$days days")
        rdyx=$(date "+%d/%m/%Y" -d "+ $days days")
        useradd -M -s /bin/false $user -e $rdyw
        (echo $password; echo $password) | passwd $user 2>/dev/null
        
        ############ DEFININDO LIMITE
        SIFRAO=$
        echo "#!/bin/bash" > /etc/rdy/usuarios/$user.sh
        echo ""$user"t="$SIFRAO"(ps -u $user |grep 'sshd' |wc -l)" >> /etc/rdy/usuarios/$user.sh
        echo "if [ "$SIFRAO""$user"t -gt $2 ]" >> /etc/rdy/usuarios/$user.sh
        echo "then" >> /etc/rdy/usuarios/$user.sh
        echo $user"pidi="$SIFRAO"(ps -u $user |grep sshd |awk {'print "$SIFRAO"1'})" >> /etc/rdy/usuarios/$user.sh
        echo 'echo "'$SIFRAO''$user''pidi'" > /etc/rdy/usuarios/pid'$user >> /etc/rdy/usuarios/$user.sh
        echo $user"pid="$SIFRAO"(cat -n /etc/rdy/usuarios/pid$user |awk ' "$SIFRAO"1 > $2 { print "$SIFRAO"NF }')" >> /etc/rdy/usuarios/$user.sh
        echo "kill -9 $SIFRAO"$user"pid" >> /etc/rdy/usuarios/$user.sh
        echo "fi" >> /etc/rdy/usuarios/$user.sh
        
        mkdir /etc/rdy/time 1>/dev/null 2>/dev/null
        echo "#!/bin/bash" > /etc/rdy/time/$user.sh
        echo "bash /etc/rdy/usuarios/"$user".sh" >> /etc/rdy/time/$user.sh
        for i in {1..10}; do
            echo "sleep 5s" >> /etc/rdy/time/$user.sh
            echo "bash /etc/rdy/usuarios/"$user".sh" >> /etc/rdy/time/$user.sh
        done
        echo "$logins" > /etc/rdy/limit/$user
        echo "*/1 * * * * root bash /etc/rdy/time/$user.sh" >> /etc/crontab
        echo "#" >> /etc/crontab
        
        ##############################
        echo -e $DIVIS
        echo -e "${green}IP: $cyano$ip$f";
        echo -e "${green}USUÁRIO: $cyano$user$f";
        echo -e "${green}SENHA: $cyano$password$f";
        echo -e "${green}EXPIRA EM: $cyano$rdyx$f";
        echo -e "${green}LIMITE: $cyano$logins$f";
        echo -e $DIVIS
        
        echo "$password" > /etc/rdy/mpass/$user
        echo "$rdyw" > /etc/rdy/mdate/$user
        
        echo -ne "${white}//${yellow}//${green}//${mag}//    ${green}Pressione uma tecla para retornar ao menu inicial...$f";
        read -n1 -r -p "";
        RDYUSERMANAGER
    fi
}


##############
RDYNEWUSERTIME(){
    echo -e "${blue}--$yellow>>$f$white menu${blue}/${yellow}GERENCIAMENTO DE USUÁRIOS${blue}/${mag}$NEWUSERTIME$f     $yellow [${blue}v$yellow]$f";
    echo -e $DIVIS
    echo -ne "${blue}[1/2]${green}Gerar usuário e senha aleatória?$f"; read -p "[s/N]: " -e -i s result
    if [[ "$result" = 'v' ]]; then
        read -p "Quer mesmo voltar? [s/n]: " esco
        if [[ "$esco" = 's' ]]; then
            $mainmenu
        fi
    fi
    RDY_USER=$(LC_ALL=C tr -dc 'A-Za-z0-9' </dev/urandom | head -c 6 ; echo)
    RDY_PASSWORD=$(LC_ALL=C tr -dc 'A-Za-z0-9' </dev/urandom | head -c 6 ; echo)
    if [ -d /etc/rdy/rdy_test_users ]
    then
        echo ""
    else
        mkdir -p /etc/rdy/rdy_test_users
    fi
    if [[ "$result" = 's' ]]; then
        sleep 0.01
        for testus in $(ls /etc/rdy/rdy_test_users |sort |sed 's/.sh//g')
        do
            echo "$testus"
        done
        echo -e "${blue}Use s = segundos, m = minutos, h = horas e d = dias $cbranco EX: 14s .$f"
        echo -ne "${blue}[2/2]${green}Quanto time o usuário ${mag}$RDY_USER$f deve durar? $f"; read -p "" timein
        time=$(echo "$timein" |sed 's/ //g')
        useradd -M -s /bin/false $RDY_USER
        (echo $RDY_PASSWORD;echo $RDY_PASSWORD) |passwd $RDY_USER 1>/dev/null 2>/dev/null
        echo "#!/bin/bash
sleep $time
kill"' $(ps -u '"$RDY_USER |awk '{print"' $1'"}') 1>/dev/null 2>/dev/null
userdel --force $RDY_USER
rm -rf /etc/rdy/rdy_test_users/$RDY_USER.sh
        exit" > /etc/rdy/rdy_test_users/$RDY_USER.sh
        echo -e $DIVIS
        echo -e "${green}IP: $cyano$ip$f"
        echo -e "${green}USUÁRIO: $cyano$user$f"
        echo -e "${green}SENHA: $cyano$pass$f"
        echo -e "${green}EXPIRA EM: $cyano$time$f"
        echo -e $DIVIS
        echo -e "${mag}Apos o time expirar o usuario sera deletado e todos serão desconectados.$f";
        bash /etc/rdy/rdy_test_users/$RDY_USER.sh &
        echo -ne "${white}//${yellow}//${green}//${mag}//    ${green}Pressione uma tecla para retornar ao menu inicial...$f"; read -n1 -r -p "";
        RDYUSERMANAGER
    else
        for testus in $(ls /etc/rdy/rdy_test_users |sort |sed 's/.sh//g')
        do
            echo "$testus"
        done
        printf "\n"
        echo -ne "${blue}[1/3]${green}Nome do novo usuario: $f"; read user
        if [[ "$user" = 'v' ]]; then
            read -p "Quer mesmo voltar? [s/n]: " esco
            if [[ "$esco" = 's' ]]; then
                $mainmenu
            fi
        fi
        echo -ne "${blue}[2/3]${green}Senha para o usuário: $f"; read pass
        if [[ "$pass" = 'v' ]]; then
            read -p "Quer mesmo voltar? [s/n]: " esco
            if [[ "$esco" = 's' ]]; then
                $mainmenu
            fi
        fi
        echo -e "\n${blue}Use s = segundos, m = minutos, h = horas e d = dias $cbranco EX: 14s .$f";
        echo -ne "${blue}[3/3]${green}Tempo de validade:$f"; read -p " " timein
        if [[ "$timein" = 'v' ]]; then
            read -p "Quer mesmo voltar? [s/n]: " esco
            if [[ "$esco" = 's' ]]; then
                $mainmenu
            fi
        fi
        time=$(echo "$timein" |sed 's/ //g')
        useradd -M -s /bin/false $user
        (echo $pass;echo $pass) |passwd $user 1>/dev/null 2>/dev/null
        echo "#!/bin/bash
sleep $time
kill"' $(ps -u '"$user |awk '{print"' $1'"}') 1>/dev/null 2>/dev/null
userdel --force $user
rm -rf /etc/rdy/rdy_test_users/$user.sh
        exit" > /etc/rdy/rdy_test_users/$user.sh
        echo -e $DIVIS
        echo -e "${green}IP: $cyano$ip$f";
        echo -e "${green}USUÁRIO: $cyano$user$f";
        echo -e "${green}SENHA: $cyano$pass$f";
        echo -e "${green}EXPIRA EM: $cyano$time$f";
        echo -e $DIVIS
        echo -e "${mag}Apos o time expirar o usuario sera deletado e todos serão desconectados.$f";
        bash /etc/rdy/rdy_test_users/$user.sh &
        echo -ne "${white}//${yellow}//${green}//${mag}//    ${green}Pressione uma tecla para retornar ao menu inicial...$f"; read -n1 -r -p "";
        RDYUSERMANAGER
    fi
}

####################
RDYDELETEUSER(){
    echo -e "${blue}--$yellow>>$f$white menu${blue}/${yellow}GERENCIAMENTO DE USUÁRIOS${blue}/${mag}$DELETEUSER$f     $yellow [${blue}v$yellow] $yellow=$f$white Voltar$f";
    echo -e $DIVIS
    echo -ne "${blue}[1/1]${green}Nome do usuário$f"; read -p ": " user
    if [[ "$user" = 'v' ]]; then
        read -p "Quer mesmo voltar? [s/n]: " esco
        if [[ "$esco" = 's' ]]; then
            $mainmenu
        fi
    fi
    if cat /etc/passwd |grep $user: > /dev/null
    then
        history -c
    else
        clear
        echo -e "${mag}Usuário ${red}$user${mag} não existe!$f";
        echo -ne "${white}//${yellow}//${green}//${mag}//    ${green}Pressione uma tecla para retornar ao menu...$f"; read -n1 -r -p "";
        RDYDELETEUSER
    fi
    userdel --force $user > /dev/null 2>/dev/null
    echo -e "${green}USUÁRIO: $cyano$user ${red}DELETADO!$f";
    echo -ne "${white}//${yellow}//${green}//${mag}//    ${green}Pressione uma tecla para retornar ao menu inicial...$f"; read -n1 -r -p "";
    RDYUSERMANAGER
}


####################
RDYCHANGELIMIT(){
    echo -e "${blue}--$yellow>>$f$white menu${blue}/${yellow}GERENCIAMENTO DE USUÁRIOS${blue}/${mag}$CHANGELIMIT$f    $yellow [${blue}v$yellow]$f";
    echo -e $DIVIS
    echo -ne "${blue}[1/2]${green}Nome do usuário$f"; read -p ": " user
    if [[ "$user" = 'v' ]]; then
        read -p "Quer mesmo voltar? [s/n]: " esco
        if [[ "$esco" = 's' ]]; then
            $mainmenu
        fi
    fi
    if cat /etc/passwd |grep $user: > /dev/null
    then
        history -c
    else
        echo -e "${mag}Usuário ${red}$user${mag} não existe!$f";
        echo -ne "${white}//${yellow}//${green}//${mag}//    ${green}Pressione uma tecla para retornar ao menu...$f"; read -n1 -r -p "";
        RDYCHANGELIMIT
    fi
    
    if cat /etc/rdy/limit/$user > /dev/null 2> /dev/null
    then
        limitatual=$(cat /etc/rdy/limit/$user)
    else
        rdy="Não definido!";
    fi
    usercon=$(ps -u $user | grep sshd | wc -l)
    
    echo -e "${yellow}Num. de logins atual: ${green}$limitatual$f";
    echo -e "${yellow}Num. de conectados: ${green}$usercon$f";
    echo "":
    echo -ne "${blue}[2/2]${green}Quantidade de logins para ${mag}$user:$f"; read -p ": " logins
    limit $user $logins
    echo -e "${green}USUÁRIO: $cyano$user$f";
    echo -e "${green}NUM. DE LOGINS DEFINIDO: $cyano$logins$f";
    echo -e $DIVIS
    echo -ne "${white}//${yellow}//${green}//${mag}//    ${green}Pressione uma tecla para retornar ao menu inicial...$f"; read -n1 -r -p "";
    RDYUSERMANAGER
}

######################
RDYCHANGEDATE(){
    echo -e "${blue}--$yellow>>$f$white menu${blue}/${yellow}GERENCIAMENTO DE USUÁRIOS${blue}/${mag}$CHANGEDATE$f     $yellow [${blue}v$yellow]$f";
    echo -e $DIVIS
    echo -ne "${blue}[1/1]${green}Nome do usuário$f"; read -p ": " user
    if [[ "$user" = 'v' ]]; then
        read -p "Quer mesmo voltar? [s/n]: " esco
        if [[ "$esco" = 's' ]]; then
            $mainmenu
        fi
    fi
    if cat /etc/passwd |grep $user: > /dev/null
    then
        history -c
    else
        echo -e "${mag}Usuário ${red}$user${mag} não existe!$f";
        echo -ne "${white}//${yellow}//${green}//${mag}//    ${green}Pressione uma tecla para retornar ao menu...$f"; read -n1 -r -p "";
        RDYCHANGEDATE
    fi
    echo -e "${blue}Digite os dados para a nova data de expiração$f";
    echo -ne "${blue}[1/3]${green}Dia(01-30): $f"; read -p "" dia
    if [[ "$dia" = 'v' ]]; then
        read -p "Quer mesmo voltar? [s/n]: " esco
        if [[ "$esco" = 's' ]]; then
            $mainmenu
        fi
        elif [[ "$dia" = '' ]]; then
        dia="05";
    fi
    echo -ne "${blue}[2/3]${green}Mês(01-12): $f"; read -p "" mes
    if [[ "$mes" = 'v' ]]; then
        read -p "Quer mesmo voltar? [s/n]: " esco
        if [[ "$esco" = 's' ]]; then
            $mainmenu
        fi
        elif [[ "$mes" = '' ]]; then
        mes="10";
    fi
    echo -ne "${blue}[3/3]${green}Ano(2017-3000): $f"; read -p "" ano
    if [[ "$ano" = 'v' ]]; then
        read -p "Quer mesmo voltar? [s/n]: " esco
        if [[ "$esco" = 's' ]]; then
            $mainmenu
        fi
        elif [[ "$ano" = '' ]]; then
        ano="2019";
    fi
    
    chage -E $ano/$mes/$dia $user 2> /dev/null
    echo -e "${green}NOVA DATA DO ${blue}$user$f: ${mag} $dia/$mes/$ano$f";
    echo -e $DIVIS
    echo -ne "${white}//${yellow}//${green}//${mag}//    ${green}Pressione uma tecla para retornar ao menu inicial...$f"; read -n1 -r -p "";
    RDYUSERMANAGER
}
############################################################

RDYCHANGEPASSWORD(){
    echo -e "${blue}--$yellow>>$f$white menu${blue}/${yellow}GERENCIAMENTO DE USUÁRIOS${blue}/${mag}$CHANGEPASSWORD$f     $yellow [${blue}v$yellow]$f";
    echo -e $DIVIS
    echo -ne "${blue}[1/2]${green}Nome do usuário$f"; read -p ": " user
    if [[ "$user" = 'v' ]]; then
        read -p "Quer mesmo voltar? [s/n]: " esco
        if [[ "$esco" = 's' ]]; then
            $mainmenu
        fi
    fi
    if cat /etc/passwd |grep $user: > /dev/null
    then
        echo -ne "${blue}[2/2]${green}Nova senha para o usuário \033[4;35m$user$f"; read -p ": " password
        (echo $password; echo $password)|passwd $user 2>/dev/null
        echo "$password" > /etc/rdy/mpass/$user
        echo -e $DIVIS
        echo -e "${green}USUÁRIO: $cyano$user$f";
        echo -e "${green}SENHA DEFINIDA: $cyano$password$f";
        echo -e $DIVIS
        echo -ne "${white}//${yellow}//${green}//${mag}//    ${green}Pressione uma tecla para retornar ao menu inicial...$f"; read -n1 -r -p "";
        RDYUSERMANAGER
    else
        echo -e "${mag}Usuário ${red}$user${mag} não existe!$f"
    fi
}


RDYREMOVELIMITUSER(){
    echo -e "${blue}--$yellow>>$f$white menu${blue}/${yellow}GERENCIAMENTO DE USUÁRIOS${blue}/${mag}$REMOVELIMITUSER$f";
    echo -e $DIVIS
    echo -ne "${blue}[1/1]${green}Nome do usuário$f"; read -p ": " user
    if [[ "$user" = 'v' ]]; then
        read -p "Quer mesmo voltar? [s/n]: " esco
        if [[ "$esco" = 's' ]]; then
            $mainmenu
        fi
    fi
    if cat /etc/passwd |grep $user: > /dev/null
    then
        cronsemuser=$(cat /etc/crontab |grep -v "#$user#")
        echo "$cronsemuser" > /etc/crontab
        rm -rf /etc/rdy/limit/$user 2>/dev/null
        rm -rf /etc/rdy/limit/$user.sh 2>/dev/null
        pids=$(ps x |grep "#$user#" |awk {'print $1'})
        kill $pids 2>/dev/null
        kill "$pids" 2>/dev/null
        kill -9 `ps x |grep "#$user#" |awk {'print $1'}` 2>/dev/null
        kill `ps x |grep "#$user#" |awk {'print $1'}` 2>/dev/null
        echo -e $DIVIS
        echo -e "${green}LIMTE DO USUÁRIO $cyano$user ${red}REMOVIDO!$f"
        echo -e $DIVIS
        echo -ne "${white}//${yellow}//${green}//${mag}//    ${green}Pressione uma tecla para retornar ao menu inicial...$f"; read -n1 -r -p "";
        RDYUSERMANAGER
    else
        echo -e "${mag}Usuário ${red}$user${mag} não existe!$f"
        echo -ne "${white}//${yellow}//${green}//${mag}//    ${green}Pressione uma tecla para retornar ao menu...$f"; read -n1 -r -p "";
        RDYREMOVELIMITUSER
    fi
}
##############

RDYDELETEEXPIREDUSERS(){
    echo -e "${blue}--$yellow>>$f$white menu${blue}/${yellow}GERENCIAMENTO DE USUÁRIOS${blue}/${mag}$DELETEEXPIREDUSERS$f    $yellow [${blue}v$yellow]$f";
    echo -e $DIVIS
    echo -e "${white}(${mag}<${green}i${mag}>${white})    ${blue}Ao continuar, você irá remover todos os usuários expirados do seu servidor.$f";
    echo -ne "${white}//${yellow}//${green}//${mag}//    ${yellow}CONTINUAR COM A OPERAÇÃO?$f"; read -p " [s/n]: " -e -i s yesNo
    if [[ "$yesNo" = 'v' ]]; then
        read -p "Quer mesmo voltar? [s/n]: " esco
        if [[ "$esco" = 's' ]]; then
            $mainmenu
        fi
        elif [[ "$yesNo" = 's' ]]; then
        history -c
    else
        $mainmenu
    fi
    datahoje=$(date +%s)
    for user in $(cat /etc/passwd |grep -v "nobody" |awk -F : '$3 > 900 {print $1}')
    do
        dataexp=$(chage -l $user |grep "Account expires" |awk -F : '{print $2}')
        if [[ $dataexp == ' never' ]]; then
            id > /dev/null 2>/dev/null
        else
            dataexpn=$(date -d"$dataexp" '+%d/%m/%Y')
            dataexpnum=$(date '+%s' -d"$dataexp")
        fi
        if [[ $dataexpnum < $datahoje ]]; then
            printf "$red "
            printf '%-41s' $user
            printf "$f"
            echo -e "${white}//${yellow}//${green}//${mag}//    ${yellow}DELETADO$f";
            kill $(ps -u $user |awk '{print $1}') >/dev/null 2>/dev/null ; userdel $user
        else
            printf "$green "
            printf '%-41s' $user
            printf "$f"
            echo $dataexpn
        fi
    done
    echo -ne "${white}//${yellow}//${green}//${mag}//    ${green}Pressione uma tecla para retornar ao menu...$f"; read -n1 -r -p "";
    RDYUSERMANAGER
}

##############
RDYUSERDETAILS(){
    
    rdyallusers(){
        echo -e "${white}  USUÁRIO               SENHA               EXPIRA         LOGINS$f"
        echo -e "$blue--------------------------------------------------------------------$f"
        for users in `awk -F : '$3 > 900 { print $1 }' /etc/passwd |grep -v "nobody" |grep -vi polkitd |grep -vi system-`
        do
            
            if cat /etc/rdy/limit/$users > /dev/null 2> /dev/null
            then
                limitcs=$(cat /etc/rdy/limit/$users)
            else
                limitcs="?"
            fi
            
            if  mpass=$(cat /etc/rdy/mpass/$users > /dev/null 2> /dev/null)
            then
                mpass=$(cat /etc/rdy/mpass/$users)
            else
                mpass="?"
            fi
            
            data=$(chage -l $users |grep -i co |awk -F : '{print $2}')
            if [ $data = never ] 2> /dev/null
            then
                data="?"
            fi
            rdydata=$(printf '%-18s' "$data")
            rdylimit=$(printf '%-10s' "$limitcs")
            rdyuser=$(printf ' %-21s' "$users")
            rdypass=$(printf '%-18s' "$mpass")
            echo -e "${green} $rdyuser ${mag}$rdypass ${blue}$rdydata ${yellow}$rdylimit$f"
            echo -e "${blue}--------------------------------------------------------------------$f"
        done
        echo -ne "${white}//${yellow}//${green}//${mag}//    ${green}Pressione uma tecla para retornar ao menu...$f"; read -n1 -r -p "";
        RDYUSERMANAGER
    }
    
    
    echo -e "${blue}--$yellow>>$f$white menu${blue}/${yellow}GERENCIAMENTO DE USUÁRIOS${blue}/${mag}$USERDETAILS$f    $yellow [${blue}v$yellow]$f";
    echo -e $DIVIS
    echo -ne "${white}//${yellow}//${green}//${mag}//    ${yellow}LISTAR USUÁRIO ESPECÍFICO?$f"; read -p " [s/n]: " -e -i n yesNo
    echo "";
    if [[ "$yesNo" = 'v' ]]; then
        read -p "Quer mesmo voltar? [s/n]: " esco
        if [[ "$esco" = 's' ]]; then
            $mainmenu
        fi
        elif [[ "$yesNo" = 's' ]]; then
        
        echo -ne "${blue}[1/1]${green}Nome do usuário$f"; read -p ": " user
        echo -e $DIVIS
        if cat /etc/passwd |grep $user: > /dev/null
        then
            history -c
        else
            echo -e "${mag}Usuário ${red}$user${mag} não existe!$f";
            echo -ne "${white}//${yellow}//${green}//${mag}//    ${green}Pressione uma tecla para retornar...$f"; read -n1 -r -p "";
            RDYUSERDETAILS
        fi
        
        
        if cat /etc/rdy/limit/$users > /dev/null 2> /dev/null
        then
            limitcs=$(cat /etc/rdy/limit/$user)
        else
            limitcs="?"
        fi
        
        if  mpass=$(cat /etc/rdy/mpass/$user > /dev/null 2> /dev/null)
        then
            mpass=$(cat /etc/rdy/mpass/$user)
        else
            mpass="?"
        fi
        
        data=$(chage -l $user |grep -i co |awk -F : '{print $2}')
        if [ $data = never ] 2> /dev/null
        then
            data="?"
        fi
        rdydata=$(printf '%-18s' "$data")
        rdylimit=$(printf '%-10s' "$limitcs")
        rdyuser=$(printf ' %-21s' "$user")
        rdypass=$(printf '%-18s' "$mpass")
        echo -e "$cbranco  USUÁRIO               SENHA               EXPIRA         LOGINS$f"
        echo -e "$blue --------------------------------------------------------------------$f"
        echo -e "${green} $rdyuser ${mag}$rdypass ${blue}$rdydata ${yellow}$rdylimit$f"
        echo -e "$blue --------------------------------------------------------------------$f"
        echo -ne "${white}//${yellow}//${green}//${mag}//    ${green}Pressione uma tecla para retornar ao menu...$f"; read -n1 -r -p "";
        RDYUSERMANAGER
        elif [[ "$yesNo" = 'n' ]]; then
        rdyallusers
    else
        rdyallusers
    fi
    
}


RDYDISCONNECTUSER(){
    echo -e "${blue}--$yellow>>$f$white menu${blue}/${yellow}GERENCIAMENTO DE USUÁRIOS${blue}/${mag}$DISCONNECTUSER$f";
    echo -e $DIVIS
    echo -ne "${blue}[1/1]${green}Nome do usuário$f"; read -p ": " user
    if [[ "$user" = 'v' ]]; then
        read -p "Quer mesmo voltar? [s/n]: " esco
        if [[ "$esco" = 's' ]]; then
            $mainmenu
        fi
    fi
    echo -e $DIVIS
    if cat /etc/passwd |grep $user: > /dev/null
    then
        pkill -9 -u $user
        echo -e "${green}USUÁRIO $cyano$user ${red}DESCONECTADO!$f"
        echo -e $DIVIS
        echo -ne "${white}//${yellow}//${green}//${mag}//    ${green}Pressione uma tecla para retornar ao menu...$f"; read -n1 -r -p "";
        RDYUSERMANAGER
    else
        echo -e "${mag}Usuário ${red}$user${mag} não existe!$f";
        echo -ne "${white}//${yellow}//${green}//${mag}//    ${green}Pressione uma tecla para retornar...$f"; read -n1 -r -p "";
        RDYDISCONNECTUSER
    fi
}

RDYUSERMONITOR(){
    clear
    while true; do
        echo ""
        echo -e "${mag}                Para voltar ao menu, pressione a tecla 'Q'                    $f";
        echo -e "${mag}|---------------------------------------------------------|$f";
        echo -e "\033[45;1;37m   Usuário                :               Conexão/Limite   $f";
        echo -e "${mag}|---------------------------------------------------------|$f";
        awk -F : '$3 > 900 { print $1 }' /etc/passwd |grep -v "nobody" |grep -vi polkitd |grep -vi systemd-[a-z] |grep -vi systemd-[0-9] | \
        xargs -I {} sh -c 'usurnum=$(ps -u {} |grep sshd |wc -l); if cat /etc/rdy/limit/{} > /dev/null 2> /dev/null; then rdy=$(cat /etc/rdy/limit/{}); else rdy="?"; fi; echo -e "${yellow}     $(printf "%-42s%s" {} $usurnum/$rdy) $f"; echo -e "${mag}|---------------------------------------------------------|$f"'
        # Captura da entrada do teclado
        read -rsn1 input
        if [[ $input = "q" || $input = "Q" ]]; then
          #  clear
           $mainmenu
        fi
        clear
    done
}


RDYBACKUPUSERS(){
    echo -e "${blue}--$yellow>>$f$white menu${blue}/${yellow}GERENCIAMENTO DE USUÁRIOS${blue}/${mag}$BACKUPUSERS$f";
    echo -e $DIVIS
    echo -ne "${blue}[1/1]${green}Nome para o arquivo de backup$f"; read -p "(Ex: backupServerBr002): " file
    
    current_date_time="`date +%d-%m-%Y-%H:%M:%S`";
    
    if [[ "$file" = 'v' ]]; then
        read -p "Quer mesmo voltar? [s/n]: " esco
        if [[ "$esco" = 's' ]]; then
            $mainmenu
        fi
        elif [[ "$file" = '' ]]; then
        $mainmenu
    fi
    
    echo -e "${white}//${yellow}//${green}//${mag}//    ${blue}GERANDO BACKUP ${mag}${file}_$current_date_time ${green}AGUARDE...$f";
    sleep 2 & RDYSPINNER
    
    for user in `awk -F : '$3 > 900 { print $1 }' /etc/passwd |grep -v "nobody" |grep -vi polkitd |grep -vi systemd-[a-z] |grep -vi systemd-[0-9]`
    do
        
        if [ -e /etc/rdy/mpass/$user ];
        then
            passrdy=$(cat /etc/rdy/mpass/$user)
        else
            passrdy="rdysoftware";
        fi
        
        if [ -e /etc/rdy/limit/$user ]
        then
            limit=$(cat /etc/rdy/limit/$user)
            date=$(cat /etc/rdy/mdate/$user)
            echo -e "00:$ip:$user:$passrdy:$limit:$date:@rdysoftware" >> /etc/rdy/backups/${file}_$current_date_time & RDYSPINNER
        else
            echo -e "00:$ip:$user:$passrdy:100:2018/12/23:@rdysoftware" >> /etc/rdy/backups/${file}_$current_date_time & RDYSPINNER
        fi
    done
    echo -e "${green}BACKUP CONCLUÍDO! $f";
    echo -e "${green}SALVO EM ${mag}/etc/rdy/backups/${file}_$current_date_time $f";
    echo -ne "${white}//${yellow}//${green}//${mag}//    ${green}Pressione uma tecla para retornar...$f"; read -n1 -r -p "";
    RDYUSERMANAGER
}

RDYRESTOREBACKUP(){
    
    echo -e "${blue}--$yellow>>$f$white menu${blue}/${yellow}GERENCIAMENTO DE USUÁRIOS${blue}/${mag}$RESTOREBACKUP$f";
    echo -e $DIVIS
    echo -e "${blue}[1/1]${green}Diretório e nome arquivo de backup$f";
    read -p "(Ex: /etc/rdy/backups/backupServerBr*): " -e -i /etc/rdy/backups/ file
    
    if [[ "$file" = 'v' ]]; then
        read -p "Quer mesmo voltar? [s/n]: " esco
        if [[ "$esco" = 's' ]]; then
            $mainmenu
        fi
        elif [[ "$file" = '' ]]; then
        $mainmenu
    fi
    
    for user in `cat $file`
    do
        usuario=$(echo "$user" |awk -F : '{print $3}')
        mpass=$(echo "$user" |awk -F : '{print $4}')
        if cat /etc/passwd |grep $usuario: 1> /dev/null 2>/dev/null
        then
            echo " " > /dev/null
        else
            echo "$user" |cut -d: -f3 1> /dev/null 2>/dev/null
            if [ $? = 0 ]
            then
                limit=$(echo "$user" |awk -F : '{print $5}')
                data=$(echo "$user" |awk -F : '{print $6}')
                useradd -M -s /bin/false $usuario
                (echo $mpass ; echo $mpass) | passwd $usuario > /dev/null 2> /dev/null
                limit $usuario $limit 1> /dev/null 2> /dev/null
                echo "$mpass" > /etc/tomada/mpass/$usuario
                chage -E $data $usuario 2> /dev/null
                chage -W 3 $usuario 2> /dev/null
                echo "$usuario" > /etc/tomada/mdate/$usuario
            else
                useradd -M -s /bin/false $usuario
                (echo $mpass ; echo $mpass) | passwd $usuario > /dev/null 2> /dev/null
                echo "$mpass" > /etc/tomada/mpass/$usuario
            fi
            echo -e "${green}OPERAÇÃO CONCLUÍDA! $f";
        fi
    done
    echo -ne "${white}//${yellow}//${green}//${mag}//    ${green}Pressione uma tecla para retornar...$f"; read -n1 -r -p "";
    RDYUSERMANAGER
}


###################################################

RDYUSERMANAGER(){
    clear
    echo -e $DIVIS
    echo -e "$yellow CPU USADA:$cyano$CPU ${blue}|$f$yellow RAM USADA: $cyano$(($usedram / 1024))MB$yellow LIVRE: $cyano$(($freeram / 1024))MB ${blue}|$f$yellow SWAP: $cyano$(($swapram / 1024))MB  $f"
    echo -e "$green ##### $white IP:$cyano  $ip $f";
    echo -e "$green ##### $white Sistema:$cyano  $system_info $f";
    echo -e "$green ##### $white USUÁRIO:$cyano  $USERPROFILENAME $f";
    echo -e $DIVIS
    echo -e "$green $yellow [${blue}i$yellow] $yellow=$f$white Notificações $yellow 5         ${blue}/${red}/${green}/ $cyano$about$f";
    echo -e $DIVIS
    echo -e "$green $yellow />$blue 01 $yellow= $f$white$NEWUSER  $f";
    echo -e "$green $yellow />$blue 02 $yellow= $f$white$NEWUSERTIME $blue $f";
    echo -e "$green $yellow />$blue 03 $yellow= $f$white$DELETEUSER  $f";
    echo -e "$green $yellow />$blue 04 $yellow= $f$white$CHANGELIMIT  $f";
    echo -e "$green $yellow />$blue 05 $yellow= $f$white$CHANGEDATE  $f";
    echo -e "$green $yellow />$blue 06 $yellow= $f$white$CHANGEPASSWORD $f";
    echo -e "$green $yellow />$blue 07 $yellow= $f$white$DELETEEXPIREDUSERS $f";
    echo -e "$green $yellow />$blue 08 $yellow= $f$white$REMOVELIMITUSER $f";
    echo -e "$green $yellow />$blue 09 $yellow= $f$white$USERDETAILS $f";
    echo -e "$green $yellow />$blue 10 $yellow= $f$white$DISCONNECTUSER $f";
    echo -e "$green $yellow />$blue 11 $yellow= $f$white$USERMONITOR $f";
    echo -e "$green $yellow />$blue 12 $yellow= $f$white$BACKUPUSERS $f";
    echo -e "$green $yellow />$blue 13 $yellow= $f$white$RESTOREBACKUP $f";
    echo -e "$green $yellow />$blue 00 $yellow= $f$white$EXIT $f";
    echo -e $DIVIS
    echo -ne "$cyano $typeoption [01-13, v] $f"; read -p "/> " option
    case $option in
        
        i | I ) echo -e "${white}//${yellow}//${green}//${mag}//    ${green}$OP_NOT_DEVELOPED$f";
        $mainmenu;;
        v | back | voltar | anterior | antes | an ) RDYMENU;;
        1 | 01) RDYNEWUSER ;;
        2 | 02) RDYNEWUSERTIME ;;
        3 | 03) RDYDELETEUSER ;;
        4 | 04) RDYCHANGELIMIT ;;
        5 | 05) RDYCHANGEDATE ;;
        6 | 06) RDYCHANGEPASSWORD ;;
        7 | 07) RDYDELETEEXPIREDUSERS ;;
        8 | 08) RDYREMOVELIMITUSER ;;
        9 | 09) RDYUSERDETAILS ;;
        10) RDYDISCONNECTUSER ;;
        11) RDYUSERMONITOR ;;
        12) RDYBACKUPUSERS ;;
        13) RDYRESTOREBACKUP ;;
        0 | 00) exit ;;
        *) echo "$unkop" ; echo "" ; sleep 2 ; bash main ;;
    esac
    
}

RDYBANNER(){
    echo -e "${blue}--$yellow>>$f$white menu${blue}/${yellow}$TOOLS${blue}/${mag}$CREATE_BANNER$f";
    echo -e $DIVIS
    ssg=$(cat /etc/ssh/sshd_config |grep -v "Banner")
    echo "$ssg" > /etc/ssh/sshd_config
    echo "Banner /etc/rdy/banner" >> /etc/ssh/sshd_config
    service ssh restart 1>/dev/null 2>/dev/null
    service sshd restart 1>/dev/null 2>/dev/null
    if [ -f /etc/rdy/banner ]
    then
        banner=$(cat /etc/rdy/banner)
    else
        banner="Sem Banner!"
    fi
    echo -e "${green} BANNER ATUAL:\n\n${white} $banner\n$f"
    echo -ne "${blue}[1/2]${green} Texto $f"; read -p ": " banner
    if [[ "$banner" = 'v' ]]; then
        read -p "Quer mesmo voltar? [s/n]: " esco
        if [[ "$esco" = 's' ]]; then
            RDYTOOLS
        fi
        elif [[ "$banner" = '' ]]; then
        RDYTOOLS
    fi
    echo -ne "${blue}[2/2]${green} (a)Adicionar ${yellow}(s)Substuir$f"; read -p ": " option
    if [[ "$option" = 'v' ]]; then
        read -p "Quer mesmo voltar? [s/n]: " esco
        if [[ "$esco" = 's' ]]; then
            RDYTOOLS
        fi
        elif [[ "$option" = '' ]]; then
        RDYTOOLS
    fi
    echo -e $DIVIS
    echo "";
    if [[ "$option" = 'a' ]]; then
        echo -e "\n$banner" >> /etc/rdy/banner
        elif [[ "$option" = 's' ]]; then
        echo -e "$banner" > /etc/rdy/banner
    else
        echo -e "$banner" > /etc/rdy/banner
    fi
    service ssh restart 1> /dev/null 2>/dev/null
    service sshd restart 1>/dev/null 2>/dev/null
    
    echo -e "${green} BANNER ATUAL:\n\n${white} $banner\n$f"
    echo -e "${green}SALVO EM ${mag}/etc/rdy/banner$f";
    echo -ne "${white}//${yellow}//${green}//${mag}//    ${green}Pressione uma tecla para retornar...$f"; read -n1 -r -p "";
    RDYTOOLS
}

RDYCLEARCACHE(){
    echo -e "${blue}--$yellow>>$f$white menu${blue}/${yellow}$TOOLS${blue}/${mag}$CLEARCACHE$f";
    echo -e $DIVIS
    echo -e "${white}//${yellow}//${green}//${mag}//    ${mag}Pressione uma tecla para iniciar...$f"; read -n1 -r -p "";
    echo -e $DIVIS
    sync; echo 3 > /proc/sys/vm/drop_caches 1> /dev/null 2> /dev/null & RDYSPINNER
    echo -e "${mag} Clear PageCache, dentries and inodes - ${green}SUCCEFULL!$f";
    echo -e $DIVIS
    echo -ne "${white}//${yellow}//${green}//${mag}//    ${green}Pressione uma tecla para retornar...$f"; read -n1 -r -p "";
    RDYTOOLS
}

RDYADD_REMOVE_HOSTS(){
    
    addremove(){
        echo -ne "${blue}[1/2]${green} (a)Adicionar ${yellow}(s)Remover$f"; read -p ": " addremove
        if [[ "$addremove" = 'v' ]]; then
            read -p "Quer mesmo voltar? [s/n]: " esco
            if [[ "$esco" = 's' ]]; then
                RDYTOOLS
            fi
            elif [[ "$addremove" = '' ]]; then
            RDYTOOLS
        fi
    }
    echo -e "${blue}--$yellow>>$f$white menu${blue}/${yellow}$TOOLS${blue}/${mag}$ADD_REMOVE_HOSTS$f";
    echo -e $DIVIS
    echo -e "$green $yellow />$blue 01 $yellow= $f$white$SQUID_HOST $f";
    echo -e "$green $yellow />$blue 02 $yellow= $f$white$ETC_HOSTS  $f";
    echo -e "$green $yellow />$blue 03 $yellow= $f$white$ACL_ALLOW  $f";
    echo -e $DIVIS
    echo -ne "$yellow  Opção:$f";read -p ""  option
    case $option in
        1 | 01) addremove
            if [[ "$addremove" = 'a' ]]; then
                rdy="/etc/rdy/payloads"
                if [ ! -f "$rdy" ]
                then
                    echo -e $DIVIS
                    echo -e "${blue} Arquivo \033[4;31m$rdy ${blue}não encontrado!$f"
                    echo -e $DIVIS
                    echo -ne "${white}//${yellow}//${green}//${mag}//    ${green}Pressione uma tecla para retornar...$f"; read -n1 -r -p "";
                    RDYTOOLS
                else
                    echo -e $DIVIS
                    echo -e "${blue} Domínios atuais no arquivo \033[4;31m$rdy$f"
                    cat $rdy ;
                    echo ""
                    echo -e $DIVIS
                    echo -ne "${blue}[2/2]${green} Digite o novo Host$f"; read -p ": " host
                    if [[ "$host" = 'v' ]]; then
                        read -p "Quer mesmo voltar? [s/n]: " esco
                        if [[ "$esco" = 's' ]]; then
                            RDYTOOLS
                        fi
                        elif [[ "$host" = '' ]]; then
                        RDYTOOLS
                    fi
                    echo "$host" >> $rdy
                    squid3 -k reconfigure 2> /dev/null
                    squid -k reconfigure 2> /dev/null
                    echo -e $DIVIS
                    echo -e "${green} HOST ${mag}$host ${green}ADICIONADO COM SUCESSO!$f"
                    echo -e $DIVIS
                    echo -ne "${white}//${yellow}//${green}//${mag}//    ${green}Pressione uma tecla para retornar...$f"; read -n1 -r -p "";
                    RDYTOOLS
                fi
                
                elif [[ "$addremove" = 's' ]]; then
                rdy="/etc/rdy/payloads"
                echo ""
                echo -e "                          \033[45;1;37m REMOVER HOSTS $f"
                echo ""
                if [ ! -f "$rdy" ]
                then
                    echo -e $DIVIS
                    echo -e "${blue} Arquivo \033[4;31m$rdy ${blue}não encontrado!$f"
                    echo -e $DIVIS
                    echo -ne "${white}//${yellow}//${green}//${mag}//    ${green}Pressione uma tecla para retornar...$f"; read -n1 -r -p "";
                    RDYTOOLS
                else
                    echo -e $DIVIS
                    echo -e "${blue} Domínios atuais no arquivo \033[4;31m$rdy$f:$f"
                    echo ""
                    cat $rdy ;
                    echo ""
                    echo -e $DIVIS
                    echo -e "${blue} Digite o domínio que deseja remover da lista:$f"; read -p "" host
                    if [[ "$host" = 'v' ]]; then
                        read -p "Quer mesmo voltar? [s/n]: " esco
                        if [[ "$esco" = 's' ]]; then
                            RDYTOOLS
                        fi
                        elif [[ "$host" = '' ]]; then
                        RDYTOOLS
                    fi
                    if [[ -z $host ]]
                    then
                        echo -e $DIVIS
                        echo -e "${blue} Você digitou um domínio vazio ou não existente! $f"
                        echo -e $DIVIS
                        echo -ne "${white}//${yellow}//${green}//${mag}//    ${green}Pressione uma tecla para retornar...$f"; read -n1 -r -p "";
                        RDYTOOLS
                    else
                        if [[ `grep -c "^$host" $rdy` -ne 1 ]]
                        then
                            echo -e $DIVIS
                            echo -e "${blue} O domínio \033[4;31m$host$f não foi encontrado no arquivo \033[4;31m$rdy$f$f"
                            echo -e $DIVIS
                            echo -ne "${white}//${yellow}//${green}//${mag}//    ${green}Pressione uma tecla para retornar...$f"; read -n1 -r -p "";
                            RDYTOOLS
                        else
                            grep -v "^$host" $rdy > /tmp/a && mv /tmp/a $rdy
                            squid3 -k reconfigure 2> /dev/null
                            squid -k reconfigure 2> /dev/null
                            echo -e $DIVIS
                            echo -e "${green} HOST ${mag}$host ${green}REMOVIDO COM SUCESSO!$f"
                            echo -e $DIVIS
                            echo -ne "${white}//${yellow}//${green}//${mag}//    ${green}Pressione uma tecla para retornar...$f"; read -n1 -r -p "";
                            RDYTOOLS
                        fi
                    fi
                fi
            fi
            
            
            
            
        ;;
        2 | 02) addremove
            rdy="/etc/hosts.conf"
            if [[ "$addremove" = 'a' ]]; then
                if [ ! -f "$rdy" ]
                then
                    echo -e $DIVIS
                    echo -e "${blue} Arquivo \033[4;31m$rdy ${blue}não encontrado!$f"
                    echo -e $DIVIS
                    echo -ne "${white}//${yellow}//${green}//${mag}//    ${green}Pressione uma tecla para retornar...$f"; read -n1 -r -p "";
                    RDYTOOLS
                else
                    echo -e $DIVIS
                    echo -e "${blue} Domínios atuais no arquivo \033[4;31m$rdy$f"
                    cat $rdy ;
                    echo ""
                    echo -e $DIVIS
                    echo -ne "${blue}[2/2]${green} Digite o novo Host$f"; read -p ": " host
                    if [[ "$host" = 'v' ]]; then
                        read -p "Quer mesmo voltar? [s/n]: " esco
                        if [[ "$esco" = 's' ]]; then
                            RDYTOOLS
                        fi
                        elif [[ "$host" = '' ]]; then
                        RDYTOOLS
                    fi
                    echo "$host" >> $rdy
                    service ssh restart 2> /dev/null
                    squid3 -k reconfigure 2> /dev/null
                    squid -k reconfigure 2> /dev/null
                    echo -e $DIVIS
                    echo -e "${green} HOST ${mag}$host ${green}ADICIONADO COM SUCESSO!$f"
                    echo -e $DIVIS
                    echo -ne "${white}//${yellow}//${green}//${mag}//    ${green}Pressione uma tecla para retornar...$f"; read -n1 -r -p "";
                    RDYTOOLS
                fi
                
                elif [[ "$addremove" = 's' ]]; then
                echo ""
                echo -e "                          \033[45;1;37m REMOVER HOSTS $f"
                echo ""
                if [ ! -f "$rdy" ]
                then
                    echo -e $DIVIS
                    echo -e "${blue} Arquivo \033[4;31m$rdy ${blue}não encontrado!$f"
                    echo -e $DIVIS
                    echo -ne "${white}//${yellow}//${green}//${mag}//    ${green}Pressione uma tecla para retornar...$f"; read -n1 -r -p "";
                    RDYTOOLS
                else
                    echo -e $DIVIS
                    echo -e "${blue} Domínios atuais no arquivo \033[4;31m$rdy$f:$f"
                    echo ""
                    cat $rdy ;
                    echo ""
                    echo -e $DIVIS
                    echo -e "${blue} Digite o domínio que deseja remover da lista:$f"; read -p "" host
                    if [[ "$host" = 'v' ]]; then
                        read -p "Quer mesmo voltar? [s/n]: " esco
                        if [[ "$esco" = 's' ]]; then
                            RDYTOOLS
                        fi
                        elif [[ "$host" = '' ]]; then
                        RDYTOOLS
                    fi
                    if [[ -z $host ]]
                    then
                        echo -e $DIVIS
                        echo -e "${blue} Você digitou um domínio vazio ou não existente! $f"
                        echo -e $DIVIS
                        echo -ne "${white}//${yellow}//${green}//${mag}//    ${green}Pressione uma tecla para retornar...$f"; read -n1 -r -p "";
                        RDYTOOLS
                    else
                        if [[ `grep -c "^$host" $rdy` -ne 1 ]]
                        then
                            echo -e $DIVIS
                            echo -e "${blue} O domínio \033[4;31m$host$f não foi encontrado no arquivo \033[4;31m$rdy$f$f"
                            echo -e $DIVIS
                            echo -ne "${white}//${yellow}//${green}//${mag}//    ${green}Pressione uma tecla para retornar...$f"; read -n1 -r -p "";
                            RDYTOOLS
                        else
                            grep -v "^$host" $rdy > /tmp/a && mv /tmp/a $rdy
                            service ssh restart 2> /dev/null
                            squid3 -k reconfigure 2> /dev/null
                            squid -k reconfigure 2> /dev/null
                            echo -e $DIVIS
                            echo -e "${green} HOST ${mag}$host ${green}REMOVIDO COM SUCESSO!$f"
                            echo -e $DIVIS
                            echo -ne "${white}//${yellow}//${green}//${mag}//    ${green}Pressione uma tecla para retornar...$f"; read -n1 -r -p "";
                            RDYTOOLS
                        fi
                    fi
                fi
            fi
        ;;
        3 | 03) addremove;;
        00 | 0) exit ;;
        
        *)echo -e "$red Opção inválida!$f" ; echo "" ; sleep 2 ; $mainmenu;;
    esac
    
}

RDYUPDATE_SYSTEM(){
    mylog() {
        STEP=$1
        MSG=$2
        
        echo -e "step $STEP: ${green}${MSG}${f}"
        logger "step $STEP: $MSG"
    }
    
    myfail() {
        STEP=$1
        MSG=$2
        
        echo -e "step $STEP ERROR: ${red}${MSG}${f}"
        logger "step $STEP ERROR: $MSG"
    }
    
    echo -e "${blue}--$yellow>>$f$white menu${blue}/${yellow}$TOOLS${blue}/${mag}$UPDATE_SYSTEM$f";
    echo -e $DIVIS
    echo -ne "${white}//${yellow}//${green}//${mag}//    ${green}Pressione uma tecla para iniciar a atualização...$f"; read -n1 -r -p "";
    logfile=/rdy_log_atualizacao.txt
    
    mylog 1 "Pré configurando pacotes"
    sudo dpkg --configure -a >> $logfile & RDYSPINNER
    
    mylog 2 "Fixando dependências quebradas"
    sudo apt-get install -f >> $logfile & RDYSPINNER
    
    mylog 3 "Update apt cache"
    sudo apt-get update >> $logfile & RDYSPINNER
    
    mylog 4 "Atualizando pacotes"
    sudo apt-get upgrade >> $logfile & RDYSPINNER
    
    mylog 5 "Atualizando versão do SO (Isso pode demorar um pouco)"
    sudo apt-get dist-upgrade >> $logfile
    clear
    
    mylog 6 "Apagando pacotes não usados"
    sudo apt-get --purge autoremove >> $logfile & RDYSPINNER
    
    mylog 7 "Finalizando (Clean up)"
    sudo apt-get autoclean >> $logfile & RDYSPINNER
    echo -e "${green} HOST ${mag}$host ${green}PROCESSO CONCLUÍDO!$f"
    echo -ne "${white}//${yellow}//${green}//${mag}//    ${green}Pressione uma tecla para retornar ao menu inicial...$f"; read -n1 -r -p "";
    $mainmenu
}


RDYLAMP(){
    
    if [ ! -f /lamp/lamp.sh ]
    then
        
        echo -e $DIVIS
        figlet 'LAMP' -f small
        
        apt-get -y install wget screen git
        git clone https://github.com/teddysun/lamp.git 1> /dev/null 2> /dev/null & RDYSPINNER
        cd lamp 1> /dev/null 2> /dev/null & RDYSPINNER
        chmod 755 *.sh 1> /dev/null 2> /dev/null & RDYSPINNER
        screen -S lamp
        
        echo -e "${green} Souce: ${blue}https://github.com/teddysun/lamp/blob/master/README.md$f";
        echo -ne "${white}//${yellow}//${green}//${mag}//    ${green}Pressione uma tecla para continuar..$f"; read -n1 -r -p "";
        
        
        ./lamp.sh
    fi
    
}



RDYTOOLS(){
    clear
    echo -e $DIVIS
    
    echo -e "$yellow CPU USADA:$cyano$CPU ${blue}|$f$yellow RAM USADA: $cyano$(($usedram / 1024))MB$yellow LIVRE: $cyano$(($freeram / 1024))MB ${blue}|$f$yellow SWAP: $cyano$(($swapram / 1024))MB  $f"
    echo -e "$green ##### $white IP:$cyano  $ip $f";
    echo -e "$green ##### $white $SYSTEM:$cyano  $system_info $f";
    echo -e "$green ##### $white $USER:$cyano  $USERPROFILENAME $f";
    echo -e $DIVIS
    echo -e "$green $yellow [${blue}i$yellow] $yellow=$f$white $NOTIFICATION $yellow 5         ${blue}/${red}/${green}/ $cyano$about$f";
    echo -e $DIVIS
    echo -e "$green $yellow [${blue}01$yellow] $yellow=$f$white $CREATE_BANNER $f";
    echo -e "$green $yellow [${blue}02$yellow] $yellow=$f$white $CLEARCACHE $f";
    echo -e "$green $yellow [${blue}03$yellow] $yellow=$f$white $FIREWALL $f";
    echo -e "$green $yellow [${blue}04$yellow] $yellow=$f$white $ADD_REMOVE_HOSTS $f";
    echo -e "$green $yellow [${blue}05$yellow] $yellow=$f$white $UPDATE_SYSTEM $f";
    echo -e "$green $yellow [${blue}06$yellow] $yellow=$f$white $SPEEDTEST $f";
    echo -e "$green $yellow [${blue}07$yellow] $yellow=$f$white $REBOOT_SYSTEM $f";
    echo -e "$green $yellow [${blue}00$yellow] $yellow=$f$white $EXIT $f";
    echo -e $DIVIS
    echo -ne "$yellow  Opção:$f";read -p ""  option
    case $option in
        i | I ) echo -e "${white}//${yellow}//${green}//${mag}//    ${green}$OP_NOT_DEVELOPED$f";
        $mainmenu;;
        v | V | back | BACK | voltar | VOLTAR ) $mainmenu;;
        n | net | N | NET) netstat -nlpt
            echo -ne "${white}//${yellow}//${green}//${mag}//    ${green}Pressione uma tecla para retornar ao menu inicial...$f"; read -n1 -r -p "";
        $mainmenu;;
        1 | 01) RDYBANNER;;
        2 | 02) RDYCLEARCACHE;;
        3 | 03) echo -e "${white}//${yellow}//${green}//${mag}//    ${green}$OP_NOT_DEVELOPED$f"
        $mainmenu;;
        4 | 04) RDYADD_REMOVE_HOSTS;;
        5 | 05) RDYUPDATE_SYSTEM;;
        00 | 0) exit ;;
        remove_all | r_all )
            echo -e "removendo resíduos, isso é ${red}PERIGOSO!$f";
            find /tmp -mtime +7 |\
            egrep -v "`lsof -n +D /tmp | awk 'NR>1 {print $9}'| tr \\n \|`" & RDYSPINNER
        echo "concluído!";;
        *)echo -e "$red Opção inválida!$f" ; echo "" ; sleep 2 ; $mainmenu;;
    esac
    
}

RDYABOUT(){
    echo -e $DIVIS
    figlet 'RDY SOFTWARE' -f small
    
    echo -e "\n\n";
    echo -e "${yellow}   //// ${red}// ${green}/  ${yellow}RDY SCRIPT - RED\n${yellow}   //// ${red}// ${green}/  V 1.0.0\n\n${green} Telegram Canal: ${red}@rdysoftware\n${green} Telegram contato: ${red}@tomada$f";
    echo -e "\n\n";
    echo -e $DIVIS
    echo -ne "${white}//${yellow}//${green}//${mag}//    ${green}Pressione uma tecla para retornar ao menu inicial...$f"; read -n1 -r -p "";
    $mainmenu
}


RDYMENU(){
    ############################ MENU DE OPÇÕES #########################################
    clear
    echo -e $DIVIS
    
    echo -e "$yellow CPU USADA:$cyano$CPU ${blue}|$f$yellow RAM USADA: $cyano$(($usedram / 1024))MB$yellow LIVRE: $cyano$(($freeram / 1024))MB ${blue}|$f$yellow SWAP: $cyano$(($swapram / 1024))MB  $f"
    echo -e "$green ##### $white IP:$cyano  $ip ${blue}| $ippublic $f";
    echo -e "$green ##### $white $SYSTEM:$cyano  $system_info $f";
    echo -e "$green ##### $white $USER:$cyano  $USERPROFILENAME $f";
    echo -e $DIVIS
    echo -e "$green $yellow [${blue}i$yellow] $yellow=$f$white $NOTIFICATION $yellow 5         ${blue}/${red}/${green}/ $cyano$about$f";
    echo -e $DIVIS
    echo -e "$green $yellow [${blue}01$yellow] $yellow=$f$white $MENU_INSTALL $f";
    echo -e "$green $yellow [${blue}02$yellow] $yellow=$f$white $MANAGE_USERS $f";
    echo -e "$green $yellow [${blue}03$yellow] $yellow=$f$white $TOOLS $f";
    echo -e "$green $yellow [${blue}04$yellow] $yellow=$f$white $ABOUT $f";
    echo -e "$green $yellow [${blue}00$yellow] $yellow=$f$white $EXIT $f";
    echo -e $DIVIS
    echo -ne "$yellow  Opção:$f";read -p ""  option
    case $option in
        
        i | I ) echo -e "${white}//${yellow}//${green}//${mag}//    ${green}$OP_NOT_DEVELOPED$f";
        $mainmenu;;
        n | net | N | NET) netstat -nlpt
            echo -ne "${white}//${yellow}//${green}//${mag}//    ${green}Pressione uma tecla para retornar ao menu inicial...$f"; read -n1 -r -p "";
        $mainmenu;;
        1 | 01) RDYINSTALL;;
        2 | 02) RDYUSERMANAGER;;
        3 | 03) RDYTOOLS;;
        4 | 04) RDYABOUT;;
        00 | 0) exit ;;
        remove_all | r_all )
            echo -e "removendo resíduos, isso é ${red}PERIGOSO!$f";
            find /tmp -mtime +7 |\
            egrep -v "`lsof -n +D /tmp | awk 'NR>1 {print $9}'| tr \\n \|`" & RDYSPINNER
        echo "concluído!";;
        *)echo -e "$red Opção inválida!$f" ; echo "" ; sleep 2 ; $mainmenu;;
    esac
    #######################################################################################
}

# COMANDOS DIRETOS

if [[ $1 == "1" ]]; then
    RDYINSTALL
    exit 1
fi
if [[ $1 == "2" ]]; then
    RDYUSERMANAGER
    exit 1
fi
if [[ $1 == "3" ]]; then
    RDYTOOLS
    exit 1
fi
if [[ $1 == "nu" ]]; then
    RDYNEWUSER
    exit 1
fi

if [[ $1 == "--help" ]]; then
    RDYABOUT
    exit 1
fi


if [[ $1 == "lamp" ]]; then
    RDYLAMP
    exit 1
fi

if [[ $1 == "ssh2" ]]; then
    echo -e $DIVIS
    echo -ne "${white}//${yellow}//${green}//${mag}//    ${green}Clique qualquer tecla pra inicia a intalação do ${yellow}libssh2-php$f"; read -n1 -r -p "";
    sudo apt-get install -y libssh2-php && sudo /etc/init.d/apache2 restart 1> /dev/null 2> /dev/null & RDYSPINNER
    echo -e $DIVIS
    echo "";
    echo -ne "${white}//${yellow}//${green}//${mag}//    ${green}Pressione uma tecla para retornar ao menu inicial...$f"; read -n1 -r -p "";
    RED
    exit 1
fi


# INICIAR MENU
RDYMENU
